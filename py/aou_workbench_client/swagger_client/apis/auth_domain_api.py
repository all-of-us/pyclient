# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class AuthDomainApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_user_to_auth_domain(self, group_name, **kwargs):
        """
        add a user to an auth domain if you have manage groups permission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_user_to_auth_domain(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: (required)
        :param AuthDomainRequest request: request carrying user email to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_user_to_auth_domain_with_http_info(group_name, **kwargs)
        else:
            (data) = self.add_user_to_auth_domain_with_http_info(group_name, **kwargs)
            return data

    def add_user_to_auth_domain_with_http_info(self, group_name, **kwargs):
        """
        add a user to an auth domain if you have manage groups permission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_user_to_auth_domain_with_http_info(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: (required)
        :param AuthDomainRequest request: request carrying user email to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_name', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_to_auth_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_name' is set
        if ('group_name' not in params) or (params['group_name'] is None):
            raise ValueError("Missing the required parameter `group_name` when calling `add_user_to_auth_domain`")


        collection_formats = {}

        path_params = {}
        if 'group_name' in params:
            path_params['groupName'] = params['group_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/auth-domain/{groupName}/users', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_auth_domain(self, group_name, **kwargs):
        """
        This endpoint will create the registered auth domain.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_auth_domain(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: groupName (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_auth_domain_with_http_info(group_name, **kwargs)
        else:
            (data) = self.create_auth_domain_with_http_info(group_name, **kwargs)
            return data

    def create_auth_domain_with_http_info(self, group_name, **kwargs):
        """
        This endpoint will create the registered auth domain.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_auth_domain_with_http_info(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: groupName (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auth_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_name' is set
        if ('group_name' not in params) or (params['group_name'] is None):
            raise ValueError("Missing the required parameter `group_name` when calling `create_auth_domain`")


        collection_formats = {}

        path_params = {}
        if 'group_name' in params:
            path_params['groupName'] = params['group_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/auth-domain/{groupName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_user_from_auth_domain(self, group_name, **kwargs):
        """
        remove a user from an auth domain if you have manage groups permission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_user_from_auth_domain(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: (required)
        :param AuthDomainRequest request: request carrying user email to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_user_from_auth_domain_with_http_info(group_name, **kwargs)
        else:
            (data) = self.remove_user_from_auth_domain_with_http_info(group_name, **kwargs)
            return data

    def remove_user_from_auth_domain_with_http_info(self, group_name, **kwargs):
        """
        remove a user from an auth domain if you have manage groups permission
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_user_from_auth_domain_with_http_info(group_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_name: (required)
        :param AuthDomainRequest request: request carrying user email to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_name', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_from_auth_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_name' is set
        if ('group_name' not in params) or (params['group_name'] is None):
            raise ValueError("Missing the required parameter `group_name` when calling `remove_user_from_auth_domain`")


        collection_formats = {}

        path_params = {}
        if 'group_name' in params:
            path_params['groupName'] = params['group_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/auth-domain/{groupName}/users', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
