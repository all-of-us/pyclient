# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class WorkspacesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clone_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Clone an existing workspace, with given modifications to workspace metadata. Caller will own the newly cloned workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be cloned:   - the associated Firecloud workspace   - cohorts, along with reviews and annotations   - notebooks located in the default notebook directory for this workspace 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param CloneWorkspaceRequest body:
        :return: CloneWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.clone_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.clone_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def clone_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Clone an existing workspace, with given modifications to workspace metadata. Caller will own the newly cloned workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be cloned:   - the associated Firecloud workspace   - cohorts, along with reviews and annotations   - notebooks located in the default notebook directory for this workspace 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clone_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param CloneWorkspaceRequest body:
        :return: CloneWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `clone_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `clone_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/clone', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CloneWorkspaceResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_workspace(self, **kwargs):
        """
        Creates a workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_workspace(async=True)
        >>> result = thread.get()

        :param async bool
        :param Workspace workspace: workspace definition
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_workspace_with_http_info(**kwargs)
        else:
            (data) = self.create_workspace_with_http_info(**kwargs)
            return data

    def create_workspace_with_http_info(self, **kwargs):
        """
        Creates a workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_workspace_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Workspace workspace: workspace definition
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace' in params:
            body_params = params['workspace']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Workspace',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Deletes the workspace definition with the specified ID and namespace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.delete_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def delete_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Deletes the workspace definition with the specified ID and namespace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `delete_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_note_book_list(self, workspace_namespace, workspace_id, **kwargs):
        """
        Get details of Python files from google Bucket directory notebook
        Returns list of name and path of python files from google bucket, directory notebook.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_note_book_list(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: workspaceNamespace (required)
        :param str workspace_id: workspaceId (required)
        :return: list[FileDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_note_book_list_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.get_note_book_list_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def get_note_book_list_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Get details of Python files from google Bucket directory notebook
        Returns list of name and path of python files from google bucket, directory notebook.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_note_book_list_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: workspaceNamespace (required)
        :param str workspace_id: workspaceId (required)
        :return: list[FileDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_book_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_note_book_list`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_note_book_list`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[FileDetail]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Returns the workspace definition with the specified ID and namespace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: WorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.get_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def get_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Returns the workspace definition with the specified ID and namespace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: WorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WorkspaceResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_workspaces(self, **kwargs):
        """
        Returns all workspaces that a user has access to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspaces(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WorkspaceResponseListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_workspaces_with_http_info(**kwargs)
        else:
            (data) = self.get_workspaces_with_http_info(**kwargs)
            return data

    def get_workspaces_with_http_info(self, **kwargs):
        """
        Returns all workspaces that a user has access to
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspaces_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WorkspaceResponseListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WorkspaceResponseListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_workspaces_for_review(self, **kwargs):
        """
        Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspaces_for_review(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WorkspaceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_workspaces_for_review_with_http_info(**kwargs)
        else:
            (data) = self.get_workspaces_for_review_with_http_info(**kwargs)
            return data

    def get_workspaces_for_review_with_http_info(self, **kwargs):
        """
        Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_workspaces_for_review_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: WorkspaceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspaces_for_review" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/admin/workspaces/review', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WorkspaceListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def localize_all_files(self, workspace_namespace, workspace_id, **kwargs):
        """
        Get file details from google bucket and then localize to notebook server
        Get files details from bucket folders config and notebooks and then localize to notebook server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.localize_all_files(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: workspaceNamespace (required)
        :param str workspace_id: workspaceId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.localize_all_files_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.localize_all_files_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def localize_all_files_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Get file details from google bucket and then localize to notebook server
        Get files details from bucket folders config and notebooks and then localize to notebook server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.localize_all_files_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: workspaceNamespace (required)
        :param str workspace_id: workspaceId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method localize_all_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `localize_all_files`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `localize_all_files`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/localize-all-files', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def review_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Sets a research purpose review result.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.review_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param ResearchPurposeReviewRequest review: result of the research purpose review
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.review_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.review_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def review_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Sets a research purpose review result.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.review_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param ResearchPurposeReviewRequest review: result of the research purpose review
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'review']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method review_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `review_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `review_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'review' in params:
            body_params = params['review']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def share_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Shares a workspace with users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.share_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param ShareWorkspaceRequest body: users to share the workspace with
        :return: ShareWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.share_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.share_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def share_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Shares a workspace with users
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.share_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param ShareWorkspaceRequest body: users to share the workspace with
        :return: ShareWorkspaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `share_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `share_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/share', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShareWorkspaceResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param UpdateWorkspaceRequest workspace: workspace definition
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.update_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def update_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param UpdateWorkspaceRequest workspace: workspace definition
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'workspace']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `update_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace' in params:
            body_params = params['workspace']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Workspace',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
