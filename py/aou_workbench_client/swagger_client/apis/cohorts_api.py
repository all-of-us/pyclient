# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class CohortsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cohort(self, workspace_namespace, workspace_id, **kwargs):
        """
        Creates a cohort definition in a workspace.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cohort(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param Cohort cohort: cohort definition
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_cohort_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.create_cohort_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def create_cohort_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Creates a cohort definition in a workspace.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cohort_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param Cohort cohort: cohort definition
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `create_cohort`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_cohort`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cohort' in params:
            body_params = params['cohort']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Cohort',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_cohort(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Deletes the cohort definition with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cohort(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
        else:
            (data) = self.delete_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
            return data

    def delete_cohort_with_http_info(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Deletes the cohort definition with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `delete_cohort`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_cohort`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `delete_cohort`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_cohort(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Returns the cohort definition with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohort(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
        else:
            (data) = self.get_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
            return data

    def get_cohort_with_http_info(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Returns the cohort definition with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_cohort`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_cohort`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_cohort`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Cohort',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_cohorts_in_workspace(self, workspace_namespace, workspace_id, **kwargs):
        """
        Returns all cohort definitions in a workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohorts_in_workspace(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: CohortListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cohorts_in_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.get_cohorts_in_workspace_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def get_cohorts_in_workspace_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Returns all cohort definitions in a workspace
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohorts_in_workspace_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :return: CohortListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cohorts_in_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_cohorts_in_workspace`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_cohorts_in_workspace`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CohortListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def materialize_cohort(self, workspace_namespace, workspace_id, **kwargs):
        """
        Materializes a cohort for a given CDR version to specified output
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.materialize_cohort(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param MaterializeCohortRequest request: cohort materialization request
        :return: MaterializeCohortResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.materialize_cohort_with_http_info(workspace_namespace, workspace_id, **kwargs)
        else:
            (data) = self.materialize_cohort_with_http_info(workspace_namespace, workspace_id, **kwargs)
            return data

    def materialize_cohort_with_http_info(self, workspace_namespace, workspace_id, **kwargs):
        """
        Materializes a cohort for a given CDR version to specified output
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.materialize_cohort_with_http_info(workspace_namespace, workspace_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param MaterializeCohortRequest request: cohort materialization request
        :return: MaterializeCohortResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method materialize_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `materialize_cohort`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `materialize_cohort`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MaterializeCohortResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_cohort(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Modifies the cohort definition with the specified ID; fields that are omitted will not be modified 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_cohort(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param Cohort cohort: cohort definition
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
        else:
            (data) = self.update_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, **kwargs)
            return data

    def update_cohort_with_http_info(self, workspace_namespace, workspace_id, cohort_id, **kwargs):
        """
        Modifies the cohort definition with the specified ID; fields that are omitted will not be modified 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_cohort_with_http_info(workspace_namespace, workspace_id, cohort_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param Cohort cohort: cohort definition
        :return: Cohort
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cohort']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cohort" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `update_cohort`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_cohort`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `update_cohort`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cohort' in params:
            body_params = params['cohort']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Cohort',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
