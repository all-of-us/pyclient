# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class CohortBuilderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_participants(self, cdr_version_id, request, **kwargs):
        """
        Searches for participants based on criteria, criteria specific parameters, and modifiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_participants(cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param SearchRequest request: object of parameters by which to perform the search (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.count_participants_with_http_info(cdr_version_id, request, **kwargs)
        else:
            (data) = self.count_participants_with_http_info(cdr_version_id, request, **kwargs)
            return data

    def count_participants_with_http_info(self, cdr_version_id, request, **kwargs):
        """
        Searches for participants based on criteria, criteria specific parameters, and modifiers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_participants_with_http_info(cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param SearchRequest request: object of parameters by which to perform the search (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cdr_version_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_participants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `count_participants`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `count_participants`")


        collection_formats = {}

        path_params = {}
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/cohortbuilder/{cdrVersionId}/search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_chart_info(self, cdr_version_id, request, **kwargs):
        """
        Searches for demographic info about subjects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_chart_info(cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param SearchRequest request: object of parameters by which to perform the search (required)
        :return: ChartInfoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_chart_info_with_http_info(cdr_version_id, request, **kwargs)
        else:
            (data) = self.get_chart_info_with_http_info(cdr_version_id, request, **kwargs)
            return data

    def get_chart_info_with_http_info(self, cdr_version_id, request, **kwargs):
        """
        Searches for demographic info about subjects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_chart_info_with_http_info(cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param SearchRequest request: object of parameters by which to perform the search (required)
        :return: ChartInfoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cdr_version_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chart_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_chart_info`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `get_chart_info`")


        collection_formats = {}

        path_params = {}
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/cohortbuilder/{cdrVersionId}/chartinfo', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ChartInfoListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_criteria_by_type_and_parent_id(self, cdr_version_id, type, parent_id, **kwargs):
        """
        Returns builder criteria tree with the specified criteria type and parentId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_criteria_by_type_and_parent_id(cdr_version_id, type, parent_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param str type: the specific type of criteria to get (required)
        :param int parent_id: fetch children of parentId (required)
        :return: CriteriaListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_criteria_by_type_and_parent_id_with_http_info(cdr_version_id, type, parent_id, **kwargs)
        else:
            (data) = self.get_criteria_by_type_and_parent_id_with_http_info(cdr_version_id, type, parent_id, **kwargs)
            return data

    def get_criteria_by_type_and_parent_id_with_http_info(self, cdr_version_id, type, parent_id, **kwargs):
        """
        Returns builder criteria tree with the specified criteria type and parentId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_criteria_by_type_and_parent_id_with_http_info(cdr_version_id, type, parent_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param str type: the specific type of criteria to get (required)
        :param int parent_id: fetch children of parentId (required)
        :return: CriteriaListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cdr_version_id', 'type', 'parent_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_criteria_by_type_and_parent_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_criteria_by_type_and_parent_id`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_criteria_by_type_and_parent_id`")
        # verify the required parameter 'parent_id' is set
        if ('parent_id' not in params) or (params['parent_id'] is None):
            raise ValueError("Missing the required parameter `parent_id` when calling `get_criteria_by_type_and_parent_id`")


        collection_formats = {}

        path_params = {}
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'type' in params:
            path_params['type'] = params['type']
        if 'parent_id' in params:
            path_params['parentId'] = params['parent_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/{parentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CriteriaListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_criteria_tree_quick_search(self, cdr_version_id, type, value, **kwargs):
        """
        Quick search for criteria that matches on code and name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_criteria_tree_quick_search(cdr_version_id, type, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param str type: the specific type of criteria to get (required)
        :param str value: value that should match code or name (required)
        :return: CriteriaListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_criteria_tree_quick_search_with_http_info(cdr_version_id, type, value, **kwargs)
        else:
            (data) = self.get_criteria_tree_quick_search_with_http_info(cdr_version_id, type, value, **kwargs)
            return data

    def get_criteria_tree_quick_search_with_http_info(self, cdr_version_id, type, value, **kwargs):
        """
        Quick search for criteria that matches on code and name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_criteria_tree_quick_search_with_http_info(cdr_version_id, type, value, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cdr_version_id: specifies which cdr version (required)
        :param str type: the specific type of criteria to get (required)
        :param str value: value that should match code or name (required)
        :return: CriteriaListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cdr_version_id', 'type', 'value']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_criteria_tree_quick_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_criteria_tree_quick_search`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_criteria_tree_quick_search`")
        # verify the required parameter 'value' is set
        if ('value' not in params) or (params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `get_criteria_tree_quick_search`")


        collection_formats = {}

        path_params = {}
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'type' in params:
            path_params['type'] = params['type']
        if 'value' in params:
            path_params['value'] = params['value']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/cohortbuilder/{cdrVersionId}/quicksearch/{type}/{value}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CriteriaListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
