# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class CohortReviewApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cohort_review(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs):
        """
        This endpoint will create an cohort review which is a participant cohort sample specified by the review size parameter. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cohort_review(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param CreateReviewRequest request: cohort review creation request body (required)
        :return: CohortReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_cohort_review_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs)
        else:
            (data) = self.create_cohort_review_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs)
            return data

    def create_cohort_review_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs):
        """
        This endpoint will create an cohort review which is a participant cohort sample specified by the review size parameter. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cohort_review_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param CreateReviewRequest request: cohort review creation request body (required)
        :return: CohortReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cohort_review" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `create_cohort_review`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_cohort_review`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `create_cohort_review`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `create_cohort_review`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_cohort_review`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CohortReview',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_participant_cohort_annotation(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, **kwargs):
        """
        This endpoint will create a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_participant_cohort_annotation(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param ParticipantCohortAnnotation request: ParticipantCohortAnnotation creation request body (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, **kwargs)
        else:
            (data) = self.create_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, **kwargs)
            return data

    def create_participant_cohort_annotation_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, **kwargs):
        """
        This endpoint will create a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param ParticipantCohortAnnotation request: ParticipantCohortAnnotation creation request body (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_participant_cohort_annotation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `create_participant_cohort_annotation`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_participant_cohort_annotation`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `create_participant_cohort_annotation`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `create_participant_cohort_annotation`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `create_participant_cohort_annotation`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_participant_cohort_annotation`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortAnnotation',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_participant_cohort_annotation(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs):
        """
        Deletes the ParticipantCohortAnnotation with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_participant_cohort_annotation(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs)
        else:
            (data) = self.delete_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs)
            return data

    def delete_participant_cohort_annotation_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs):
        """
        Deletes the ParticipantCohortAnnotation with the specified ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id', 'annotation_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_participant_cohort_annotation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `delete_participant_cohort_annotation`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_participant_cohort_annotation`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `delete_participant_cohort_annotation`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `delete_participant_cohort_annotation`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `delete_participant_cohort_annotation`")
        # verify the required parameter 'annotation_id' is set
        if ('annotation_id' not in params) or (params['annotation_id'] is None):
            raise ValueError("Missing the required parameter `annotation_id` when calling `delete_participant_cohort_annotation`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']
        if 'annotation_id' in params:
            path_params['annotationId'] = params['annotation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations/{annotationId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_cohort_summary(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, **kwargs):
        """
        Returns a collection of CohortSummary for UI charting in cohort review.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohort_summary(workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param str domain: specifies which domain the CohortSummary should belong to. (required)
        :return: CohortSummaryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cohort_summary_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, **kwargs)
        else:
            (data) = self.get_cohort_summary_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, **kwargs)
            return data

    def get_cohort_summary_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, **kwargs):
        """
        Returns a collection of CohortSummary for UI charting in cohort review.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cohort_summary_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, domain, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param str domain: specifies which domain the CohortSummary should belong to. (required)
        :return: CohortSummaryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'domain']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cohort_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_cohort_summary`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_cohort_summary`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_cohort_summary`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_cohort_summary`")
        # verify the required parameter 'domain' is set
        if ('domain' not in params) or (params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_cohort_summary`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'domain' in params:
            path_params['domain'] = params['domain']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/charts/{domain}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CohortSummaryListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_participant_cohort_annotation(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs):
        """
        This endpoint will get a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_annotation(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs)
        else:
            (data) = self.get_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs)
            return data

    def get_participant_cohort_annotation_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, **kwargs):
        """
        This endpoint will get a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id', 'annotation_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant_cohort_annotation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_participant_cohort_annotation`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_participant_cohort_annotation`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_participant_cohort_annotation`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_participant_cohort_annotation`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `get_participant_cohort_annotation`")
        # verify the required parameter 'annotation_id' is set
        if ('annotation_id' not in params) or (params['annotation_id'] is None):
            raise ValueError("Missing the required parameter `annotation_id` when calling `get_participant_cohort_annotation`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']
        if 'annotation_id' in params:
            path_params['annotationId'] = params['annotation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations/{annotationId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortAnnotation',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_participant_cohort_annotations(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        This endpoint will get a collection of ParticipantCohortAnnotations.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_annotations(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :return: ParticipantCohortAnnotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_participant_cohort_annotations_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
        else:
            (data) = self.get_participant_cohort_annotations_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
            return data

    def get_participant_cohort_annotations_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        This endpoint will get a collection of ParticipantCohortAnnotations.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_annotations_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :return: ParticipantCohortAnnotationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant_cohort_annotations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_participant_cohort_annotations`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_participant_cohort_annotations`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_participant_cohort_annotations`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_participant_cohort_annotations`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `get_participant_cohort_annotations`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortAnnotationListResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_participant_cohort_status(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        This endpoint will return a ParticipantCohortStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_status(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :return: ParticipantCohortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
        else:
            (data) = self.get_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
            return data

    def get_participant_cohort_status_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        This endpoint will return a ParticipantCohortStatus
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :return: ParticipantCohortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant_cohort_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_participant_cohort_status`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_participant_cohort_status`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_participant_cohort_status`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_participant_cohort_status`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `get_participant_cohort_status`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortStatus',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_participant_cohort_statuses(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs):
        """
        Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint does pagination based on page, limit, order and column. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_statuses(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param ParticipantCohortStatusesRequest request: request body for getting list of ParticipantCohortStatuses. (required)
        :return: CohortReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_participant_cohort_statuses_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs)
        else:
            (data) = self.get_participant_cohort_statuses_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs)
            return data

    def get_participant_cohort_statuses_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, **kwargs):
        """
        Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint does pagination based on page, limit, order and column. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_cohort_statuses_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param ParticipantCohortStatusesRequest request: request body for getting list of ParticipantCohortStatuses. (required)
        :return: CohortReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant_cohort_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_participant_cohort_statuses`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_participant_cohort_statuses`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_participant_cohort_statuses`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_participant_cohort_statuses`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `get_participant_cohort_statuses`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CohortReview',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_participant_demographics(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, **kwargs):
        """
        Will return a list all values for gender, race and ethnicity.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_demographics(workspace_namespace, workspace_id, cohort_id, cdr_version_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :return: ParticipantDemographics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_participant_demographics_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, **kwargs)
        else:
            (data) = self.get_participant_demographics_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, **kwargs)
            return data

    def get_participant_demographics_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, **kwargs):
        """
        Will return a list all values for gender, race and ethnicity.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_participant_demographics_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :return: ParticipantDemographics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_participant_demographics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `get_participant_demographics`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_participant_demographics`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `get_participant_demographics`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `get_participant_demographics`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/demographics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantDemographics',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_participant_cohort_annotation(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, **kwargs):
        """
        This endpoint will modify a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_participant_cohort_annotation(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :param ModifyParticipantCohortAnnotationRequest request: ParticipantCohortAnnotation modification request body (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, **kwargs)
        else:
            (data) = self.update_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, **kwargs)
            return data

    def update_participant_cohort_annotation_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, **kwargs):
        """
        This endpoint will modify a ParticipantCohortAnnotation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_participant_cohort_annotation_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, annotation_id, request, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param int annotation_id: specifies which annotation (required)
        :param ModifyParticipantCohortAnnotationRequest request: ParticipantCohortAnnotation modification request body (required)
        :return: ParticipantCohortAnnotation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id', 'annotation_id', 'request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_participant_cohort_annotation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'annotation_id' is set
        if ('annotation_id' not in params) or (params['annotation_id'] is None):
            raise ValueError("Missing the required parameter `annotation_id` when calling `update_participant_cohort_annotation`")
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `update_participant_cohort_annotation`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']
        if 'annotation_id' in params:
            path_params['annotationId'] = params['annotation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations/{annotationId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortAnnotation',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_participant_cohort_status(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        Modifies the ParticipantCohortStatus status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_participant_cohort_status(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param ModifyCohortStatusRequest cohort_status_request: Contains the new review status
        :return: ParticipantCohortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
        else:
            (data) = self.update_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs)
            return data

    def update_participant_cohort_status_with_http_info(self, workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, **kwargs):
        """
        Modifies the ParticipantCohortStatus status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_participant_cohort_status_with_http_info(workspace_namespace, workspace_id, cohort_id, cdr_version_id, participant_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workspace_namespace: The Workspace namespace (required)
        :param str workspace_id: The Workspace ID (a.k.a. the workspace's Firecloud name) (required)
        :param int cohort_id: Cohort ID (required)
        :param int cdr_version_id: specifies which cdr version (required)
        :param int participant_id: specifies which participant (required)
        :param ModifyCohortStatusRequest cohort_status_request: Contains the new review status
        :return: ParticipantCohortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_namespace', 'workspace_id', 'cohort_id', 'cdr_version_id', 'participant_id', 'cohort_status_request']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_participant_cohort_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_namespace' is set
        if ('workspace_namespace' not in params) or (params['workspace_namespace'] is None):
            raise ValueError("Missing the required parameter `workspace_namespace` when calling `update_participant_cohort_status`")
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params) or (params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `update_participant_cohort_status`")
        # verify the required parameter 'cohort_id' is set
        if ('cohort_id' not in params) or (params['cohort_id'] is None):
            raise ValueError("Missing the required parameter `cohort_id` when calling `update_participant_cohort_status`")
        # verify the required parameter 'cdr_version_id' is set
        if ('cdr_version_id' not in params) or (params['cdr_version_id'] is None):
            raise ValueError("Missing the required parameter `cdr_version_id` when calling `update_participant_cohort_status`")
        # verify the required parameter 'participant_id' is set
        if ('participant_id' not in params) or (params['participant_id'] is None):
            raise ValueError("Missing the required parameter `participant_id` when calling `update_participant_cohort_status`")


        collection_formats = {}

        path_params = {}
        if 'workspace_namespace' in params:
            path_params['workspaceNamespace'] = params['workspace_namespace']
        if 'workspace_id' in params:
            path_params['workspaceId'] = params['workspace_id']
        if 'cohort_id' in params:
            path_params['cohortId'] = params['cohort_id']
        if 'cdr_version_id' in params:
            path_params['cdrVersionId'] = params['cdr_version_id']
        if 'participant_id' in params:
            path_params['participantId'] = params['participant_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cohort_status_request' in params:
            body_params = params['cohort_status_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['aou_oauth']

        return self.api_client.call_api('/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParticipantCohortStatus',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
