# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParticipantDemographics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender_list': 'list[ConceptIdName]',
        'race_list': 'list[ConceptIdName]',
        'ethnicity_list': 'list[ConceptIdName]'
    }

    attribute_map = {
        'gender_list': 'genderList',
        'race_list': 'raceList',
        'ethnicity_list': 'ethnicityList'
    }

    def __init__(self, gender_list=None, race_list=None, ethnicity_list=None):
        """
        ParticipantDemographics - a model defined in Swagger
        """

        self._gender_list = None
        self._race_list = None
        self._ethnicity_list = None
        self.discriminator = None

        self.gender_list = gender_list
        self.race_list = race_list
        self.ethnicity_list = ethnicity_list

    @property
    def gender_list(self):
        """
        Gets the gender_list of this ParticipantDemographics.

        :return: The gender_list of this ParticipantDemographics.
        :rtype: list[ConceptIdName]
        """
        return self._gender_list

    @gender_list.setter
    def gender_list(self, gender_list):
        """
        Sets the gender_list of this ParticipantDemographics.

        :param gender_list: The gender_list of this ParticipantDemographics.
        :type: list[ConceptIdName]
        """
        if gender_list is None:
            raise ValueError("Invalid value for `gender_list`, must not be `None`")

        self._gender_list = gender_list

    @property
    def race_list(self):
        """
        Gets the race_list of this ParticipantDemographics.

        :return: The race_list of this ParticipantDemographics.
        :rtype: list[ConceptIdName]
        """
        return self._race_list

    @race_list.setter
    def race_list(self, race_list):
        """
        Sets the race_list of this ParticipantDemographics.

        :param race_list: The race_list of this ParticipantDemographics.
        :type: list[ConceptIdName]
        """
        if race_list is None:
            raise ValueError("Invalid value for `race_list`, must not be `None`")

        self._race_list = race_list

    @property
    def ethnicity_list(self):
        """
        Gets the ethnicity_list of this ParticipantDemographics.

        :return: The ethnicity_list of this ParticipantDemographics.
        :rtype: list[ConceptIdName]
        """
        return self._ethnicity_list

    @ethnicity_list.setter
    def ethnicity_list(self, ethnicity_list):
        """
        Sets the ethnicity_list of this ParticipantDemographics.

        :param ethnicity_list: The ethnicity_list of this ParticipantDemographics.
        :type: list[ConceptIdName]
        """
        if ethnicity_list is None:
            raise ValueError("Invalid value for `ethnicity_list`, must not be `None`")

        self._ethnicity_list = ethnicity_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParticipantDemographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
