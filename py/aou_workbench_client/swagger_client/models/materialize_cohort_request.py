# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MaterializeCohortRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cohort_name': 'str',
        'cohort_spec': 'str',
        'status_filter': 'list[CohortStatus]',
        'cdr_version_name': 'str',
        'page_token': 'str',
        'page_size': 'int'
    }

    attribute_map = {
        'cohort_name': 'cohortName',
        'cohort_spec': 'cohortSpec',
        'status_filter': 'statusFilter',
        'cdr_version_name': 'cdrVersionName',
        'page_token': 'pageToken',
        'page_size': 'pageSize'
    }

    def __init__(self, cohort_name=None, cohort_spec=None, status_filter=None, cdr_version_name=None, page_token=None, page_size=None):
        """
        MaterializeCohortRequest - a model defined in Swagger
        """

        self._cohort_name = None
        self._cohort_spec = None
        self._status_filter = None
        self._cdr_version_name = None
        self._page_token = None
        self._page_size = None
        self.discriminator = None

        if cohort_name is not None:
          self.cohort_name = cohort_name
        if cohort_spec is not None:
          self.cohort_spec = cohort_spec
        if status_filter is not None:
          self.status_filter = status_filter
        if cdr_version_name is not None:
          self.cdr_version_name = cdr_version_name
        if page_token is not None:
          self.page_token = page_token
        if page_size is not None:
          self.page_size = page_size

    @property
    def cohort_name(self):
        """
        Gets the cohort_name of this MaterializeCohortRequest.
        The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified 

        :return: The cohort_name of this MaterializeCohortRequest.
        :rtype: str
        """
        return self._cohort_name

    @cohort_name.setter
    def cohort_name(self, cohort_name):
        """
        Sets the cohort_name of this MaterializeCohortRequest.
        The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified 

        :param cohort_name: The cohort_name of this MaterializeCohortRequest.
        :type: str
        """

        self._cohort_name = cohort_name

    @property
    def cohort_spec(self):
        """
        Gets the cohort_spec of this MaterializeCohortRequest.
        JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). Either this or cohortName should be specified 

        :return: The cohort_spec of this MaterializeCohortRequest.
        :rtype: str
        """
        return self._cohort_spec

    @cohort_spec.setter
    def cohort_spec(self, cohort_spec):
        """
        Sets the cohort_spec of this MaterializeCohortRequest.
        JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). Either this or cohortName should be specified 

        :param cohort_spec: The cohort_spec of this MaterializeCohortRequest.
        :type: str
        """

        self._cohort_spec = cohort_spec

    @property
    def status_filter(self):
        """
        Gets the status_filter of this MaterializeCohortRequest.
        An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.) 

        :return: The status_filter of this MaterializeCohortRequest.
        :rtype: list[CohortStatus]
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """
        Sets the status_filter of this MaterializeCohortRequest.
        An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.) 

        :param status_filter: The status_filter of this MaterializeCohortRequest.
        :type: list[CohortStatus]
        """

        self._status_filter = status_filter

    @property
    def cdr_version_name(self):
        """
        Gets the cdr_version_name of this MaterializeCohortRequest.
        The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used 

        :return: The cdr_version_name of this MaterializeCohortRequest.
        :rtype: str
        """
        return self._cdr_version_name

    @cdr_version_name.setter
    def cdr_version_name(self, cdr_version_name):
        """
        Sets the cdr_version_name of this MaterializeCohortRequest.
        The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used 

        :param cdr_version_name: The cdr_version_name of this MaterializeCohortRequest.
        :type: str
        """

        self._cdr_version_name = cdr_version_name

    @property
    def page_token(self):
        """
        Gets the page_token of this MaterializeCohortRequest.
        Pagination token retrieved from a previous call to materializeCohort; used for retrieving additional pages of results. If this is specified, all other fields on MaterializeCohortRequest apart from pageSize must match the values specified on the request that generated this token. 

        :return: The page_token of this MaterializeCohortRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """
        Sets the page_token of this MaterializeCohortRequest.
        Pagination token retrieved from a previous call to materializeCohort; used for retrieving additional pages of results. If this is specified, all other fields on MaterializeCohortRequest apart from pageSize must match the values specified on the request that generated this token. 

        :param page_token: The page_token of this MaterializeCohortRequest.
        :type: str
        """

        self._page_token = page_token

    @property
    def page_size(self):
        """
        Gets the page_size of this MaterializeCohortRequest.
        Maximum number of results to return in a response. Defaults to 1000. 

        :return: The page_size of this MaterializeCohortRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this MaterializeCohortRequest.
        Maximum number of results to return in a response. Defaults to 1000. 

        :param page_size: The page_size of this MaterializeCohortRequest.
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MaterializeCohortRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
