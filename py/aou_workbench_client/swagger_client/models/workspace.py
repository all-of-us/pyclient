# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Workspace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'etag': 'str',
        'name': 'str',
        'namespace': 'str',
        'description': 'str',
        'cdr_version_id': 'str',
        'creator': 'str',
        'data_access_level': 'DataAccessLevel',
        'research_purpose': 'ResearchPurpose',
        'creation_time': 'int',
        'last_modified_time': 'int',
        'user_roles': 'list[UserRole]'
    }

    attribute_map = {
        'id': 'id',
        'etag': 'etag',
        'name': 'name',
        'namespace': 'namespace',
        'description': 'description',
        'cdr_version_id': 'cdrVersionId',
        'creator': 'creator',
        'data_access_level': 'dataAccessLevel',
        'research_purpose': 'researchPurpose',
        'creation_time': 'creationTime',
        'last_modified_time': 'lastModifiedTime',
        'user_roles': 'userRoles'
    }

    def __init__(self, id=None, etag=None, name=None, namespace=None, description=None, cdr_version_id=None, creator=None, data_access_level=None, research_purpose=None, creation_time=None, last_modified_time=None, user_roles=None):
        """
        Workspace - a model defined in Swagger
        """

        self._id = None
        self._etag = None
        self._name = None
        self._namespace = None
        self._description = None
        self._cdr_version_id = None
        self._creator = None
        self._data_access_level = None
        self._research_purpose = None
        self._creation_time = None
        self._last_modified_time = None
        self._user_roles = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if etag is not None:
          self.etag = etag
        self.name = name
        if namespace is not None:
          self.namespace = namespace
        if description is not None:
          self.description = description
        if cdr_version_id is not None:
          self.cdr_version_id = cdr_version_id
        if creator is not None:
          self.creator = creator
        if data_access_level is not None:
          self.data_access_level = data_access_level
        if research_purpose is not None:
          self.research_purpose = research_purpose
        if creation_time is not None:
          self.creation_time = creation_time
        if last_modified_time is not None:
          self.last_modified_time = last_modified_time
        if user_roles is not None:
          self.user_roles = user_roles

    @property
    def id(self):
        """
        Gets the id of this Workspace.

        :return: The id of this Workspace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Workspace.

        :param id: The id of this Workspace.
        :type: str
        """

        self._id = id

    @property
    def etag(self):
        """
        Gets the etag of this Workspace.
        Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource. 

        :return: The etag of this Workspace.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this Workspace.
        Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource. 

        :param etag: The etag of this Workspace.
        :type: str
        """

        self._etag = etag

    @property
    def name(self):
        """
        Gets the name of this Workspace.

        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Workspace.

        :param name: The name of this Workspace.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this Workspace.

        :return: The namespace of this Workspace.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this Workspace.

        :param namespace: The namespace of this Workspace.
        :type: str
        """

        self._namespace = namespace

    @property
    def description(self):
        """
        Gets the description of this Workspace.

        :return: The description of this Workspace.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Workspace.

        :param description: The description of this Workspace.
        :type: str
        """

        self._description = description

    @property
    def cdr_version_id(self):
        """
        Gets the cdr_version_id of this Workspace.

        :return: The cdr_version_id of this Workspace.
        :rtype: str
        """
        return self._cdr_version_id

    @cdr_version_id.setter
    def cdr_version_id(self, cdr_version_id):
        """
        Sets the cdr_version_id of this Workspace.

        :param cdr_version_id: The cdr_version_id of this Workspace.
        :type: str
        """

        self._cdr_version_id = cdr_version_id

    @property
    def creator(self):
        """
        Gets the creator of this Workspace.

        :return: The creator of this Workspace.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this Workspace.

        :param creator: The creator of this Workspace.
        :type: str
        """

        self._creator = creator

    @property
    def data_access_level(self):
        """
        Gets the data_access_level of this Workspace.

        :return: The data_access_level of this Workspace.
        :rtype: DataAccessLevel
        """
        return self._data_access_level

    @data_access_level.setter
    def data_access_level(self, data_access_level):
        """
        Sets the data_access_level of this Workspace.

        :param data_access_level: The data_access_level of this Workspace.
        :type: DataAccessLevel
        """

        self._data_access_level = data_access_level

    @property
    def research_purpose(self):
        """
        Gets the research_purpose of this Workspace.

        :return: The research_purpose of this Workspace.
        :rtype: ResearchPurpose
        """
        return self._research_purpose

    @research_purpose.setter
    def research_purpose(self, research_purpose):
        """
        Sets the research_purpose of this Workspace.

        :param research_purpose: The research_purpose of this Workspace.
        :type: ResearchPurpose
        """

        self._research_purpose = research_purpose

    @property
    def creation_time(self):
        """
        Gets the creation_time of this Workspace.
        Milliseconds since the UNIX epoch.

        :return: The creation_time of this Workspace.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this Workspace.
        Milliseconds since the UNIX epoch.

        :param creation_time: The creation_time of this Workspace.
        :type: int
        """

        self._creation_time = creation_time

    @property
    def last_modified_time(self):
        """
        Gets the last_modified_time of this Workspace.
        Milliseconds since the UNIX epoch.

        :return: The last_modified_time of this Workspace.
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """
        Sets the last_modified_time of this Workspace.
        Milliseconds since the UNIX epoch.

        :param last_modified_time: The last_modified_time of this Workspace.
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def user_roles(self):
        """
        Gets the user_roles of this Workspace.

        :return: The user_roles of this Workspace.
        :rtype: list[UserRole]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """
        Sets the user_roles of this Workspace.

        :param user_roles: The user_roles of this Workspace.
        :type: list[UserRole]
        """

        self._user_roles = user_roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Workspace):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
