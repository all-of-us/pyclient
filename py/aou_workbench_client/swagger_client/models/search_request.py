# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'includes': 'list[SearchGroup]',
        'excludes': 'list[SearchGroup]'
    }

    attribute_map = {
        'includes': 'includes',
        'excludes': 'excludes'
    }

    def __init__(self, includes=None, excludes=None):
        """
        SearchRequest - a model defined in Swagger
        """

        self._includes = None
        self._excludes = None
        self.discriminator = None

        self.includes = includes
        self.excludes = excludes

    @property
    def includes(self):
        """
        Gets the includes of this SearchRequest.

        :return: The includes of this SearchRequest.
        :rtype: list[SearchGroup]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """
        Sets the includes of this SearchRequest.

        :param includes: The includes of this SearchRequest.
        :type: list[SearchGroup]
        """
        if includes is None:
            raise ValueError("Invalid value for `includes`, must not be `None`")

        self._includes = includes

    @property
    def excludes(self):
        """
        Gets the excludes of this SearchRequest.

        :return: The excludes of this SearchRequest.
        :rtype: list[SearchGroup]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """
        Sets the excludes of this SearchRequest.

        :param excludes: The excludes of this SearchRequest.
        :type: list[SearchGroup]
        """
        if excludes is None:
            raise ValueError("Invalid value for `excludes`, must not be `None`")

        self._excludes = excludes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
