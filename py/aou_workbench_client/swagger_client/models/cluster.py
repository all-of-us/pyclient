# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Cluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_name': 'str',
        'cluster_namespace': 'str',
        'status': 'str',
        'created_date': 'str',
        'destroyed_date': 'str',
        'labels': 'object'
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'cluster_namespace': 'clusterNamespace',
        'status': 'status',
        'created_date': 'createdDate',
        'destroyed_date': 'destroyedDate',
        'labels': 'labels'
    }

    def __init__(self, cluster_name=None, cluster_namespace=None, status=None, created_date=None, destroyed_date=None, labels=None):
        """
        Cluster - a model defined in Swagger
        """

        self._cluster_name = None
        self._cluster_namespace = None
        self._status = None
        self._created_date = None
        self._destroyed_date = None
        self._labels = None
        self.discriminator = None

        self.cluster_name = cluster_name
        self.cluster_namespace = cluster_namespace
        self.status = status
        self.created_date = created_date
        if destroyed_date is not None:
          self.destroyed_date = destroyed_date
        self.labels = labels

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this Cluster.
        The user-supplied name for the cluster

        :return: The cluster_name of this Cluster.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this Cluster.
        The user-supplied name for the cluster

        :param cluster_name: The cluster_name of this Cluster.
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def cluster_namespace(self):
        """
        Gets the cluster_namespace of this Cluster.
        The Google Project used to create the cluster

        :return: The cluster_namespace of this Cluster.
        :rtype: str
        """
        return self._cluster_namespace

    @cluster_namespace.setter
    def cluster_namespace(self, cluster_namespace):
        """
        Sets the cluster_namespace of this Cluster.
        The Google Project used to create the cluster

        :param cluster_namespace: The cluster_namespace of this Cluster.
        :type: str
        """
        if cluster_namespace is None:
            raise ValueError("Invalid value for `cluster_namespace`, must not be `None`")

        self._cluster_namespace = cluster_namespace

    @property
    def status(self):
        """
        Gets the status of this Cluster.
        The current state of the cluster

        :return: The status of this Cluster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Cluster.
        The current state of the cluster

        :param status: The status of this Cluster.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def created_date(self):
        """
        Gets the created_date of this Cluster.
        The date and time the cluster was created, in ISO-8601 format

        :return: The created_date of this Cluster.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this Cluster.
        The date and time the cluster was created, in ISO-8601 format

        :param created_date: The created_date of this Cluster.
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def destroyed_date(self):
        """
        Gets the destroyed_date of this Cluster.
        The date and time the cluster was destroyed, in ISO-8601 format

        :return: The destroyed_date of this Cluster.
        :rtype: str
        """
        return self._destroyed_date

    @destroyed_date.setter
    def destroyed_date(self, destroyed_date):
        """
        Sets the destroyed_date of this Cluster.
        The date and time the cluster was destroyed, in ISO-8601 format

        :param destroyed_date: The destroyed_date of this Cluster.
        :type: str
        """

        self._destroyed_date = destroyed_date

    @property
    def labels(self):
        """
        Gets the labels of this Cluster.
        The labels to be placed on the cluster. Of type Map[String,String]

        :return: The labels of this Cluster.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this Cluster.
        The labels to be placed on the cluster. Of type Map[String,String]

        :param labels: The labels of this Cluster.
        :type: object
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
