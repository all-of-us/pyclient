# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FieldSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_query': 'TableQuery',
        'annotation_query': 'AnnotationQuery'
    }

    attribute_map = {
        'table_query': 'tableQuery',
        'annotation_query': 'annotationQuery'
    }

    def __init__(self, table_query=None, annotation_query=None):
        """
        FieldSet - a model defined in Swagger
        """

        self._table_query = None
        self._annotation_query = None
        self.discriminator = None

        if table_query is not None:
          self.table_query = table_query
        if annotation_query is not None:
          self.annotation_query = annotation_query

    @property
    def table_query(self):
        """
        Gets the table_query of this FieldSet.
        A query specifying how to pull data out of a single table. Either this or annotationQuery should be set (not both.) 

        :return: The table_query of this FieldSet.
        :rtype: TableQuery
        """
        return self._table_query

    @table_query.setter
    def table_query(self, table_query):
        """
        Sets the table_query of this FieldSet.
        A query specifying how to pull data out of a single table. Either this or annotationQuery should be set (not both.) 

        :param table_query: The table_query of this FieldSet.
        :type: TableQuery
        """

        self._table_query = table_query

    @property
    def annotation_query(self):
        """
        Gets the annotation_query of this FieldSet.
        A query specifying how to retrieve annotation values created about participants in a cohort during cohort review. Either this or tableQuery should be set (not both.) 

        :return: The annotation_query of this FieldSet.
        :rtype: AnnotationQuery
        """
        return self._annotation_query

    @annotation_query.setter
    def annotation_query(self, annotation_query):
        """
        Sets the annotation_query of this FieldSet.
        A query specifying how to retrieve annotation values created about participants in a cohort during cohort review. Either this or tableQuery should be set (not both.) 

        :param annotation_query: The annotation_query of this FieldSet.
        :type: AnnotationQuery
        """

        self._annotation_query = annotation_query

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FieldSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
