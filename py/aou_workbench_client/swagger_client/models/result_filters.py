# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultFilters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'if_not': 'bool',
        'all_of': 'list[ResultFilters]',
        'any_of': 'list[ResultFilters]',
        'column_filter': 'ColumnFilter'
    }

    attribute_map = {
        'if_not': 'if_not',
        'all_of': 'allOf',
        'any_of': 'anyOf',
        'column_filter': 'columnFilter'
    }

    def __init__(self, if_not=None, all_of=None, any_of=None, column_filter=None):
        """
        ResultFilters - a model defined in Swagger
        """

        self._if_not = None
        self._all_of = None
        self._any_of = None
        self._column_filter = None
        self.discriminator = None

        if if_not is not None:
          self.if_not = if_not
        if all_of is not None:
          self.all_of = all_of
        if any_of is not None:
          self.any_of = any_of
        if column_filter is not None:
          self.column_filter = column_filter

    @property
    def if_not(self):
        """
        Gets the if_not of this ResultFilters.
        Set to true if a result matching allOf or anyOf below should result in a result *not* being returned. 

        :return: The if_not of this ResultFilters.
        :rtype: bool
        """
        return self._if_not

    @if_not.setter
    def if_not(self, if_not):
        """
        Sets the if_not of this ResultFilters.
        Set to true if a result matching allOf or anyOf below should result in a result *not* being returned. 

        :param if_not: The if_not of this ResultFilters.
        :type: bool
        """

        self._if_not = if_not

    @property
    def all_of(self):
        """
        Gets the all_of of this ResultFilters.
        A list of result filters. All filters matching means a result should be returned (or not returned if \"not\" is true.) 

        :return: The all_of of this ResultFilters.
        :rtype: list[ResultFilters]
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """
        Sets the all_of of this ResultFilters.
        A list of result filters. All filters matching means a result should be returned (or not returned if \"not\" is true.) 

        :param all_of: The all_of of this ResultFilters.
        :type: list[ResultFilters]
        """

        self._all_of = all_of

    @property
    def any_of(self):
        """
        Gets the any_of of this ResultFilters.
        A list of column filters. Any filters matching means a result should be returned (or not returned if \"not\" is true.) 

        :return: The any_of of this ResultFilters.
        :rtype: list[ResultFilters]
        """
        return self._any_of

    @any_of.setter
    def any_of(self, any_of):
        """
        Sets the any_of of this ResultFilters.
        A list of column filters. Any filters matching means a result should be returned (or not returned if \"not\" is true.) 

        :param any_of: The any_of of this ResultFilters.
        :type: list[ResultFilters]
        """

        self._any_of = any_of

    @property
    def column_filter(self):
        """
        Gets the column_filter of this ResultFilters.
        A filter on a column in the table. Only a result matching this filter should be returned (or not returned if \"not\" is true.) 

        :return: The column_filter of this ResultFilters.
        :rtype: ColumnFilter
        """
        return self._column_filter

    @column_filter.setter
    def column_filter(self, column_filter):
        """
        Sets the column_filter of this ResultFilters.
        A filter on a column in the table. Only a result matching this filter should be returned (or not returned if \"not\" is true.) 

        :param column_filter: The column_filter of this ResultFilters.
        :type: ColumnFilter
        """

        self._column_filter = column_filter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
