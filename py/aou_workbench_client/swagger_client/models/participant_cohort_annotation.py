# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParticipantCohortAnnotation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation_id': 'int',
        'cohort_annotation_definition_id': 'int',
        'cohort_review_id': 'int',
        'participant_id': 'int',
        'annotation_value_string': 'str',
        'annotation_value_enum': 'str',
        'annotation_value_date': 'str',
        'annotation_value_boolean': 'bool',
        'annotation_value_integer': 'int'
    }

    attribute_map = {
        'annotation_id': 'annotationId',
        'cohort_annotation_definition_id': 'cohortAnnotationDefinitionId',
        'cohort_review_id': 'cohortReviewId',
        'participant_id': 'participantId',
        'annotation_value_string': 'annotationValueString',
        'annotation_value_enum': 'annotationValueEnum',
        'annotation_value_date': 'annotationValueDate',
        'annotation_value_boolean': 'annotationValueBoolean',
        'annotation_value_integer': 'annotationValueInteger'
    }

    def __init__(self, annotation_id=None, cohort_annotation_definition_id=None, cohort_review_id=None, participant_id=None, annotation_value_string=None, annotation_value_enum=None, annotation_value_date=None, annotation_value_boolean=None, annotation_value_integer=None):
        """
        ParticipantCohortAnnotation - a model defined in Swagger
        """

        self._annotation_id = None
        self._cohort_annotation_definition_id = None
        self._cohort_review_id = None
        self._participant_id = None
        self._annotation_value_string = None
        self._annotation_value_enum = None
        self._annotation_value_date = None
        self._annotation_value_boolean = None
        self._annotation_value_integer = None
        self.discriminator = None

        if annotation_id is not None:
          self.annotation_id = annotation_id
        if cohort_annotation_definition_id is not None:
          self.cohort_annotation_definition_id = cohort_annotation_definition_id
        self.cohort_review_id = cohort_review_id
        self.participant_id = participant_id
        if annotation_value_string is not None:
          self.annotation_value_string = annotation_value_string
        if annotation_value_enum is not None:
          self.annotation_value_enum = annotation_value_enum
        if annotation_value_date is not None:
          self.annotation_value_date = annotation_value_date
        if annotation_value_boolean is not None:
          self.annotation_value_boolean = annotation_value_boolean
        if annotation_value_integer is not None:
          self.annotation_value_integer = annotation_value_integer

    @property
    def annotation_id(self):
        """
        Gets the annotation_id of this ParticipantCohortAnnotation.
        participant annotation id.

        :return: The annotation_id of this ParticipantCohortAnnotation.
        :rtype: int
        """
        return self._annotation_id

    @annotation_id.setter
    def annotation_id(self, annotation_id):
        """
        Sets the annotation_id of this ParticipantCohortAnnotation.
        participant annotation id.

        :param annotation_id: The annotation_id of this ParticipantCohortAnnotation.
        :type: int
        """

        self._annotation_id = annotation_id

    @property
    def cohort_annotation_definition_id(self):
        """
        Gets the cohort_annotation_definition_id of this ParticipantCohortAnnotation.
        annotation definition id.

        :return: The cohort_annotation_definition_id of this ParticipantCohortAnnotation.
        :rtype: int
        """
        return self._cohort_annotation_definition_id

    @cohort_annotation_definition_id.setter
    def cohort_annotation_definition_id(self, cohort_annotation_definition_id):
        """
        Sets the cohort_annotation_definition_id of this ParticipantCohortAnnotation.
        annotation definition id.

        :param cohort_annotation_definition_id: The cohort_annotation_definition_id of this ParticipantCohortAnnotation.
        :type: int
        """

        self._cohort_annotation_definition_id = cohort_annotation_definition_id

    @property
    def cohort_review_id(self):
        """
        Gets the cohort_review_id of this ParticipantCohortAnnotation.
        the cohort reivew id.

        :return: The cohort_review_id of this ParticipantCohortAnnotation.
        :rtype: int
        """
        return self._cohort_review_id

    @cohort_review_id.setter
    def cohort_review_id(self, cohort_review_id):
        """
        Sets the cohort_review_id of this ParticipantCohortAnnotation.
        the cohort reivew id.

        :param cohort_review_id: The cohort_review_id of this ParticipantCohortAnnotation.
        :type: int
        """
        if cohort_review_id is None:
            raise ValueError("Invalid value for `cohort_review_id`, must not be `None`")

        self._cohort_review_id = cohort_review_id

    @property
    def participant_id(self):
        """
        Gets the participant_id of this ParticipantCohortAnnotation.
        the participant id.

        :return: The participant_id of this ParticipantCohortAnnotation.
        :rtype: int
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """
        Sets the participant_id of this ParticipantCohortAnnotation.
        the participant id.

        :param participant_id: The participant_id of this ParticipantCohortAnnotation.
        :type: int
        """
        if participant_id is None:
            raise ValueError("Invalid value for `participant_id`, must not be `None`")

        self._participant_id = participant_id

    @property
    def annotation_value_string(self):
        """
        Gets the annotation_value_string of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is STRING

        :return: The annotation_value_string of this ParticipantCohortAnnotation.
        :rtype: str
        """
        return self._annotation_value_string

    @annotation_value_string.setter
    def annotation_value_string(self, annotation_value_string):
        """
        Sets the annotation_value_string of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is STRING

        :param annotation_value_string: The annotation_value_string of this ParticipantCohortAnnotation.
        :type: str
        """

        self._annotation_value_string = annotation_value_string

    @property
    def annotation_value_enum(self):
        """
        Gets the annotation_value_enum of this ParticipantCohortAnnotation.
        The option chosen for the annotation if the AnnotationType is ENUM

        :return: The annotation_value_enum of this ParticipantCohortAnnotation.
        :rtype: str
        """
        return self._annotation_value_enum

    @annotation_value_enum.setter
    def annotation_value_enum(self, annotation_value_enum):
        """
        Sets the annotation_value_enum of this ParticipantCohortAnnotation.
        The option chosen for the annotation if the AnnotationType is ENUM

        :param annotation_value_enum: The annotation_value_enum of this ParticipantCohortAnnotation.
        :type: str
        """

        self._annotation_value_enum = annotation_value_enum

    @property
    def annotation_value_date(self):
        """
        Gets the annotation_value_date of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is DATE

        :return: The annotation_value_date of this ParticipantCohortAnnotation.
        :rtype: str
        """
        return self._annotation_value_date

    @annotation_value_date.setter
    def annotation_value_date(self, annotation_value_date):
        """
        Sets the annotation_value_date of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is DATE

        :param annotation_value_date: The annotation_value_date of this ParticipantCohortAnnotation.
        :type: str
        """

        self._annotation_value_date = annotation_value_date

    @property
    def annotation_value_boolean(self):
        """
        Gets the annotation_value_boolean of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is BOOLEAN

        :return: The annotation_value_boolean of this ParticipantCohortAnnotation.
        :rtype: bool
        """
        return self._annotation_value_boolean

    @annotation_value_boolean.setter
    def annotation_value_boolean(self, annotation_value_boolean):
        """
        Sets the annotation_value_boolean of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is BOOLEAN

        :param annotation_value_boolean: The annotation_value_boolean of this ParticipantCohortAnnotation.
        :type: bool
        """

        self._annotation_value_boolean = annotation_value_boolean

    @property
    def annotation_value_integer(self):
        """
        Gets the annotation_value_integer of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is INTEGER

        :return: The annotation_value_integer of this ParticipantCohortAnnotation.
        :rtype: int
        """
        return self._annotation_value_integer

    @annotation_value_integer.setter
    def annotation_value_integer(self, annotation_value_integer):
        """
        Sets the annotation_value_integer of this ParticipantCohortAnnotation.
        The Value of the annotation if the AnnotationType is INTEGER

        :param annotation_value_integer: The annotation_value_integer of this ParticipantCohortAnnotation.
        :type: int
        """

        self._annotation_value_integer = annotation_value_integer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParticipantCohortAnnotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
