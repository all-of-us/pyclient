# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IdVerificationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'street_line1': 'str',
        'street_line2': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'dob': 'str',
        'document_type': 'str',
        'document_number': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'street_line1': 'streetLine1',
        'street_line2': 'streetLine2',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'dob': 'dob',
        'document_type': 'documentType',
        'document_number': 'documentNumber'
    }

    def __init__(self, first_name=None, last_name=None, street_line1=None, street_line2=None, city=None, state=None, zip=None, dob=None, document_type=None, document_number=None):
        """
        IdVerificationRequest - a model defined in Swagger
        """

        self._first_name = None
        self._last_name = None
        self._street_line1 = None
        self._street_line2 = None
        self._city = None
        self._state = None
        self._zip = None
        self._dob = None
        self._document_type = None
        self._document_number = None
        self.discriminator = None

        self.first_name = first_name
        self.last_name = last_name
        if street_line1 is not None:
          self.street_line1 = street_line1
        if street_line2 is not None:
          self.street_line2 = street_line2
        self.city = city
        self.state = state
        self.zip = zip
        self.dob = dob
        self.document_type = document_type
        self.document_number = document_number

    @property
    def first_name(self):
        """
        Gets the first_name of this IdVerificationRequest.

        :return: The first_name of this IdVerificationRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this IdVerificationRequest.

        :param first_name: The first_name of this IdVerificationRequest.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this IdVerificationRequest.

        :return: The last_name of this IdVerificationRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this IdVerificationRequest.

        :param last_name: The last_name of this IdVerificationRequest.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def street_line1(self):
        """
        Gets the street_line1 of this IdVerificationRequest.

        :return: The street_line1 of this IdVerificationRequest.
        :rtype: str
        """
        return self._street_line1

    @street_line1.setter
    def street_line1(self, street_line1):
        """
        Sets the street_line1 of this IdVerificationRequest.

        :param street_line1: The street_line1 of this IdVerificationRequest.
        :type: str
        """

        self._street_line1 = street_line1

    @property
    def street_line2(self):
        """
        Gets the street_line2 of this IdVerificationRequest.

        :return: The street_line2 of this IdVerificationRequest.
        :rtype: str
        """
        return self._street_line2

    @street_line2.setter
    def street_line2(self, street_line2):
        """
        Sets the street_line2 of this IdVerificationRequest.

        :param street_line2: The street_line2 of this IdVerificationRequest.
        :type: str
        """

        self._street_line2 = street_line2

    @property
    def city(self):
        """
        Gets the city of this IdVerificationRequest.

        :return: The city of this IdVerificationRequest.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this IdVerificationRequest.

        :param city: The city of this IdVerificationRequest.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def state(self):
        """
        Gets the state of this IdVerificationRequest.

        :return: The state of this IdVerificationRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this IdVerificationRequest.

        :param state: The state of this IdVerificationRequest.
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def zip(self):
        """
        Gets the zip of this IdVerificationRequest.

        :return: The zip of this IdVerificationRequest.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this IdVerificationRequest.

        :param zip: The zip of this IdVerificationRequest.
        :type: str
        """
        if zip is None:
            raise ValueError("Invalid value for `zip`, must not be `None`")

        self._zip = zip

    @property
    def dob(self):
        """
        Gets the dob of this IdVerificationRequest.

        :return: The dob of this IdVerificationRequest.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """
        Sets the dob of this IdVerificationRequest.

        :param dob: The dob of this IdVerificationRequest.
        :type: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def document_type(self):
        """
        Gets the document_type of this IdVerificationRequest.
        https://docs.blockscore.com/v4/curl/#documents

        :return: The document_type of this IdVerificationRequest.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """
        Sets the document_type of this IdVerificationRequest.
        https://docs.blockscore.com/v4/curl/#documents

        :param document_type: The document_type of this IdVerificationRequest.
        :type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def document_number(self):
        """
        Gets the document_number of this IdVerificationRequest.
        https://docs.blockscore.com/v4/curl/#documents

        :return: The document_number of this IdVerificationRequest.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """
        Sets the document_number of this IdVerificationRequest.
        https://docs.blockscore.com/v4/curl/#documents

        :param document_number: The document_number of this IdVerificationRequest.
        :type: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")

        self._document_number = document_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IdVerificationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
