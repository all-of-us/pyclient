# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackTraceElement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_name': 'str',
        'method_name': 'str',
        'file_name': 'str',
        'line_number': 'int'
    }

    attribute_map = {
        'class_name': 'className',
        'method_name': 'methodName',
        'file_name': 'fileName',
        'line_number': 'lineNumber'
    }

    def __init__(self, class_name=None, method_name=None, file_name=None, line_number=None):
        """
        StackTraceElement - a model defined in Swagger
        """

        self._class_name = None
        self._method_name = None
        self._file_name = None
        self._line_number = None
        self.discriminator = None

        self.class_name = class_name
        self.method_name = method_name
        self.file_name = file_name
        self.line_number = line_number

    @property
    def class_name(self):
        """
        Gets the class_name of this StackTraceElement.
        class name

        :return: The class_name of this StackTraceElement.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """
        Sets the class_name of this StackTraceElement.
        class name

        :param class_name: The class_name of this StackTraceElement.
        :type: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")

        self._class_name = class_name

    @property
    def method_name(self):
        """
        Gets the method_name of this StackTraceElement.
        method name

        :return: The method_name of this StackTraceElement.
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """
        Sets the method_name of this StackTraceElement.
        method name

        :param method_name: The method_name of this StackTraceElement.
        :type: str
        """
        if method_name is None:
            raise ValueError("Invalid value for `method_name`, must not be `None`")

        self._method_name = method_name

    @property
    def file_name(self):
        """
        Gets the file_name of this StackTraceElement.
        source file name

        :return: The file_name of this StackTraceElement.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this StackTraceElement.
        source file name

        :param file_name: The file_name of this StackTraceElement.
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def line_number(self):
        """
        Gets the line_number of this StackTraceElement.
        line number

        :return: The line_number of this StackTraceElement.
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """
        Sets the line_number of this StackTraceElement.
        line number

        :param line_number: The line_number of this StackTraceElement.
        :type: int
        """
        if line_number is None:
            raise ValueError("Invalid value for `line_number`, must not be `None`")

        self._line_number = line_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackTraceElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
