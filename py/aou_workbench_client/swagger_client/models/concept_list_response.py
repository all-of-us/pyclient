# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConceptListResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items': 'list[Concept]',
        'match_type': 'MatchType',
        'standard_concepts': 'list[Concept]'
    }

    attribute_map = {
        'items': 'items',
        'match_type': 'matchType',
        'standard_concepts': 'standardConcepts'
    }

    def __init__(self, items=None, match_type=None, standard_concepts=None):
        """
        ConceptListResponse - a model defined in Swagger
        """

        self._items = None
        self._match_type = None
        self._standard_concepts = None
        self.discriminator = None

        self.items = items
        if match_type is not None:
          self.match_type = match_type
        if standard_concepts is not None:
          self.standard_concepts = standard_concepts

    @property
    def items(self):
        """
        Gets the items of this ConceptListResponse.

        :return: The items of this ConceptListResponse.
        :rtype: list[Concept]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this ConceptListResponse.

        :param items: The items of this ConceptListResponse.
        :type: list[Concept]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def match_type(self):
        """
        Gets the match_type of this ConceptListResponse.
        match column type on which concept search was successful

        :return: The match_type of this ConceptListResponse.
        :rtype: MatchType
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """
        Sets the match_type of this ConceptListResponse.
        match column type on which concept search was successful

        :param match_type: The match_type of this ConceptListResponse.
        :type: MatchType
        """

        self._match_type = match_type

    @property
    def standard_concepts(self):
        """
        Gets the standard_concepts of this ConceptListResponse.
        standard concepts associated with the matched concept

        :return: The standard_concepts of this ConceptListResponse.
        :rtype: list[Concept]
        """
        return self._standard_concepts

    @standard_concepts.setter
    def standard_concepts(self, standard_concepts):
        """
        Sets the standard_concepts of this ConceptListResponse.
        standard concepts associated with the matched concept

        :param standard_concepts: The standard_concepts of this ConceptListResponse.
        :type: list[Concept]
        """

        self._standard_concepts = standard_concepts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConceptListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
