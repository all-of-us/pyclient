# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Attribute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'operands': 'list[str]'
    }

    attribute_map = {
        'operator': 'operator',
        'operands': 'operands'
    }

    def __init__(self, operator=None, operands=None):
        """
        Attribute - a model defined in Swagger
        """

        self._operator = None
        self._operands = None
        self.discriminator = None

        self.operator = operator
        self.operands = operands

    @property
    def operator(self):
        """
        Gets the operator of this Attribute.

        :return: The operator of this Attribute.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this Attribute.

        :param operator: The operator of this Attribute.
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def operands(self):
        """
        Gets the operands of this Attribute.

        :return: The operands of this Attribute.
        :rtype: list[str]
        """
        return self._operands

    @operands.setter
    def operands(self, operands):
        """
        Sets the operands of this Attribute.

        :param operands: The operands of this Attribute.
        :type: list[str]
        """
        if operands is None:
            raise ValueError("Invalid value for `operands`, must not be `None`")

        self._operands = operands

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Attribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
