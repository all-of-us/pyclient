# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Criteria(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'subtype': 'str',
        'code': 'str',
        'name': 'str',
        'count': 'int',
        'group': 'bool',
        'selectable': 'bool',
        'concept_id': 'int',
        'domain_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'subtype': 'subtype',
        'code': 'code',
        'name': 'name',
        'count': 'count',
        'group': 'group',
        'selectable': 'selectable',
        'concept_id': 'conceptId',
        'domain_id': 'domainId'
    }

    def __init__(self, id=None, type=None, subtype=None, code=None, name=None, count=None, group=None, selectable=None, concept_id=None, domain_id=None):
        """
        Criteria - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._subtype = None
        self._code = None
        self._name = None
        self._count = None
        self._group = None
        self._selectable = None
        self._concept_id = None
        self._domain_id = None
        self.discriminator = None

        self.id = id
        self.type = type
        if subtype is not None:
          self.subtype = subtype
        self.code = code
        self.name = name
        if count is not None:
          self.count = count
        self.group = group
        self.selectable = selectable
        if concept_id is not None:
          self.concept_id = concept_id
        if domain_id is not None:
          self.domain_id = domain_id

    @property
    def id(self):
        """
        Gets the id of this Criteria.
        id of the criteria

        :return: The id of this Criteria.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Criteria.
        id of the criteria

        :param id: The id of this Criteria.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Criteria.
        type of criteria

        :return: The type of this Criteria.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Criteria.
        type of criteria

        :param type: The type of this Criteria.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def subtype(self):
        """
        Gets the subtype of this Criteria.
        subtype of this criteria

        :return: The subtype of this Criteria.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """
        Sets the subtype of this Criteria.
        subtype of this criteria

        :param subtype: The subtype of this Criteria.
        :type: str
        """

        self._subtype = subtype

    @property
    def code(self):
        """
        Gets the code of this Criteria.
        code that identifies this criteria, ex: icd9, icd10 or cpt all have codes that map to the concept_code column in the concept table. 

        :return: The code of this Criteria.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Criteria.
        code that identifies this criteria, ex: icd9, icd10 or cpt all have codes that map to the concept_code column in the concept table. 

        :param code: The code of this Criteria.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def name(self):
        """
        Gets the name of this Criteria.
        description of criteria

        :return: The name of this Criteria.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Criteria.
        description of criteria

        :param name: The name of this Criteria.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def count(self):
        """
        Gets the count of this Criteria.
        est. count in the cdr

        :return: The count of this Criteria.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this Criteria.
        est. count in the cdr

        :param count: The count of this Criteria.
        :type: int
        """

        self._count = count

    @property
    def group(self):
        """
        Gets the group of this Criteria.
        specifies if child or parent

        :return: The group of this Criteria.
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this Criteria.
        specifies if child or parent

        :param group: The group of this Criteria.
        :type: bool
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def selectable(self):
        """
        Gets the selectable of this Criteria.
        specifies if user can search with

        :return: The selectable of this Criteria.
        :rtype: bool
        """
        return self._selectable

    @selectable.setter
    def selectable(self, selectable):
        """
        Sets the selectable of this Criteria.
        specifies if user can search with

        :param selectable: The selectable of this Criteria.
        :type: bool
        """
        if selectable is None:
            raise ValueError("Invalid value for `selectable`, must not be `None`")

        self._selectable = selectable

    @property
    def concept_id(self):
        """
        Gets the concept_id of this Criteria.
        concept ids are ids associated with a specific vocabulary item, in the concept table and allow you to search for that code in its domain table. 

        :return: The concept_id of this Criteria.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """
        Sets the concept_id of this Criteria.
        concept ids are ids associated with a specific vocabulary item, in the concept table and allow you to search for that code in its domain table. 

        :param concept_id: The concept_id of this Criteria.
        :type: int
        """

        self._concept_id = concept_id

    @property
    def domain_id(self):
        """
        Gets the domain_id of this Criteria.
        clue to determine which tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable. 

        :return: The domain_id of this Criteria.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """
        Sets the domain_id of this Criteria.
        clue to determine which tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable. 

        :param domain_id: The domain_id of this Criteria.
        :type: str
        """

        self._domain_id = domain_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Criteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
