# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'message': 'str',
        'exception_class': 'str',
        'status_code': 'int',
        'causes': 'list[ErrorReport]',
        'stack_trace': 'list[StackTraceElement]'
    }

    attribute_map = {
        'source': 'source',
        'message': 'message',
        'exception_class': 'exceptionClass',
        'status_code': 'statusCode',
        'causes': 'causes',
        'stack_trace': 'stackTrace'
    }

    def __init__(self, source=None, message=None, exception_class=None, status_code=None, causes=None, stack_trace=None):
        """
        ErrorReport - a model defined in Swagger
        """

        self._source = None
        self._message = None
        self._exception_class = None
        self._status_code = None
        self._causes = None
        self._stack_trace = None
        self.discriminator = None

        self.source = source
        self.message = message
        if exception_class is not None:
          self.exception_class = exception_class
        if status_code is not None:
          self.status_code = status_code
        self.causes = causes
        self.stack_trace = stack_trace

    @property
    def source(self):
        """
        Gets the source of this ErrorReport.
        service causing error

        :return: The source of this ErrorReport.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ErrorReport.
        service causing error

        :param source: The source of this ErrorReport.
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def message(self):
        """
        Gets the message of this ErrorReport.
        what went wrong

        :return: The message of this ErrorReport.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ErrorReport.
        what went wrong

        :param message: The message of this ErrorReport.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def exception_class(self):
        """
        Gets the exception_class of this ErrorReport.
        class of exception thrown

        :return: The exception_class of this ErrorReport.
        :rtype: str
        """
        return self._exception_class

    @exception_class.setter
    def exception_class(self, exception_class):
        """
        Sets the exception_class of this ErrorReport.
        class of exception thrown

        :param exception_class: The exception_class of this ErrorReport.
        :type: str
        """

        self._exception_class = exception_class

    @property
    def status_code(self):
        """
        Gets the status_code of this ErrorReport.
        HTTP status code

        :return: The status_code of this ErrorReport.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this ErrorReport.
        HTTP status code

        :param status_code: The status_code of this ErrorReport.
        :type: int
        """

        self._status_code = status_code

    @property
    def causes(self):
        """
        Gets the causes of this ErrorReport.
        errors triggering this one

        :return: The causes of this ErrorReport.
        :rtype: list[ErrorReport]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """
        Sets the causes of this ErrorReport.
        errors triggering this one

        :param causes: The causes of this ErrorReport.
        :type: list[ErrorReport]
        """
        if causes is None:
            raise ValueError("Invalid value for `causes`, must not be `None`")

        self._causes = causes

    @property
    def stack_trace(self):
        """
        Gets the stack_trace of this ErrorReport.
        stack trace

        :return: The stack_trace of this ErrorReport.
        :rtype: list[StackTraceElement]
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """
        Sets the stack_trace of this ErrorReport.
        stack trace

        :param stack_trace: The stack_trace of this ErrorReport.
        :type: list[StackTraceElement]
        """
        if stack_trace is None:
            raise ValueError("Invalid value for `stack_trace`, must not be `None`")

        self._stack_trace = stack_trace

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ErrorReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
