# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConceptSynonym(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concept_id': 'int',
        'concept_synonym_name': 'str',
        'language_concept_id': 'int'
    }

    attribute_map = {
        'concept_id': 'conceptId',
        'concept_synonym_name': 'conceptSynonymName',
        'language_concept_id': 'languageConceptId'
    }

    def __init__(self, concept_id=None, concept_synonym_name=None, language_concept_id=None):
        """
        ConceptSynonym - a model defined in Swagger
        """

        self._concept_id = None
        self._concept_synonym_name = None
        self._language_concept_id = None
        self.discriminator = None

        self.concept_id = concept_id
        self.concept_synonym_name = concept_synonym_name
        self.language_concept_id = language_concept_id

    @property
    def concept_id(self):
        """
        Gets the concept_id of this ConceptSynonym.
        concept id

        :return: The concept_id of this ConceptSynonym.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """
        Sets the concept_id of this ConceptSynonym.
        concept id

        :param concept_id: The concept_id of this ConceptSynonym.
        :type: int
        """
        if concept_id is None:
            raise ValueError("Invalid value for `concept_id`, must not be `None`")

        self._concept_id = concept_id

    @property
    def concept_synonym_name(self):
        """
        Gets the concept_synonym_name of this ConceptSynonym.
        concept synonym name

        :return: The concept_synonym_name of this ConceptSynonym.
        :rtype: str
        """
        return self._concept_synonym_name

    @concept_synonym_name.setter
    def concept_synonym_name(self, concept_synonym_name):
        """
        Sets the concept_synonym_name of this ConceptSynonym.
        concept synonym name

        :param concept_synonym_name: The concept_synonym_name of this ConceptSynonym.
        :type: str
        """
        if concept_synonym_name is None:
            raise ValueError("Invalid value for `concept_synonym_name`, must not be `None`")

        self._concept_synonym_name = concept_synonym_name

    @property
    def language_concept_id(self):
        """
        Gets the language_concept_id of this ConceptSynonym.
        language concept id

        :return: The language_concept_id of this ConceptSynonym.
        :rtype: int
        """
        return self._language_concept_id

    @language_concept_id.setter
    def language_concept_id(self, language_concept_id):
        """
        Sets the language_concept_id of this ConceptSynonym.
        language concept id

        :param language_concept_id: The language_concept_id of this ConceptSynonym.
        :type: int
        """
        if language_concept_id is None:
            raise ValueError("Invalid value for `language_concept_id`, must not be `None`")

        self._language_concept_id = language_concept_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConceptSynonym):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
