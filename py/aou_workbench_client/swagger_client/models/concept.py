# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Concept(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concept_id': 'int',
        'concept_name': 'str',
        'domain_id': 'str',
        'vocabulary_id': 'str',
        'concept_code': 'str',
        'concept_class_id': 'str',
        'standard_concept': 'bool',
        'count_value': 'int',
        'prevalence': 'float',
        'concept_synonyms': 'list[str]'
    }

    attribute_map = {
        'concept_id': 'conceptId',
        'concept_name': 'conceptName',
        'domain_id': 'domainId',
        'vocabulary_id': 'vocabularyId',
        'concept_code': 'conceptCode',
        'concept_class_id': 'conceptClassId',
        'standard_concept': 'standardConcept',
        'count_value': 'countValue',
        'prevalence': 'prevalence',
        'concept_synonyms': 'conceptSynonyms'
    }

    def __init__(self, concept_id=None, concept_name=None, domain_id=None, vocabulary_id=None, concept_code=None, concept_class_id=None, standard_concept=None, count_value=None, prevalence=None, concept_synonyms=None):
        """
        Concept - a model defined in Swagger
        """

        self._concept_id = None
        self._concept_name = None
        self._domain_id = None
        self._vocabulary_id = None
        self._concept_code = None
        self._concept_class_id = None
        self._standard_concept = None
        self._count_value = None
        self._prevalence = None
        self._concept_synonyms = None
        self.discriminator = None

        self.concept_id = concept_id
        self.concept_name = concept_name
        self.domain_id = domain_id
        self.vocabulary_id = vocabulary_id
        self.concept_code = concept_code
        self.concept_class_id = concept_class_id
        self.standard_concept = standard_concept
        self.count_value = count_value
        self.prevalence = prevalence
        if concept_synonyms is not None:
          self.concept_synonyms = concept_synonyms

    @property
    def concept_id(self):
        """
        Gets the concept_id of this Concept.
        ID of the concept

        :return: The concept_id of this Concept.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """
        Sets the concept_id of this Concept.
        ID of the concept

        :param concept_id: The concept_id of this Concept.
        :type: int
        """
        if concept_id is None:
            raise ValueError("Invalid value for `concept_id`, must not be `None`")

        self._concept_id = concept_id

    @property
    def concept_name(self):
        """
        Gets the concept_name of this Concept.
        Name of the concept

        :return: The concept_name of this Concept.
        :rtype: str
        """
        return self._concept_name

    @concept_name.setter
    def concept_name(self, concept_name):
        """
        Sets the concept_name of this Concept.
        Name of the concept

        :param concept_name: The concept_name of this Concept.
        :type: str
        """
        if concept_name is None:
            raise ValueError("Invalid value for `concept_name`, must not be `None`")

        self._concept_name = concept_name

    @property
    def domain_id(self):
        """
        Gets the domain_id of this Concept.
        Domain ID of the concept (e.g. Observation)

        :return: The domain_id of this Concept.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """
        Sets the domain_id of this Concept.
        Domain ID of the concept (e.g. Observation)

        :param domain_id: The domain_id of this Concept.
        :type: str
        """
        if domain_id is None:
            raise ValueError("Invalid value for `domain_id`, must not be `None`")

        self._domain_id = domain_id

    @property
    def vocabulary_id(self):
        """
        Gets the vocabulary_id of this Concept.
        Vocabulary ID of the concept (e.g. SNOMED)

        :return: The vocabulary_id of this Concept.
        :rtype: str
        """
        return self._vocabulary_id

    @vocabulary_id.setter
    def vocabulary_id(self, vocabulary_id):
        """
        Sets the vocabulary_id of this Concept.
        Vocabulary ID of the concept (e.g. SNOMED)

        :param vocabulary_id: The vocabulary_id of this Concept.
        :type: str
        """
        if vocabulary_id is None:
            raise ValueError("Invalid value for `vocabulary_id`, must not be `None`")

        self._vocabulary_id = vocabulary_id

    @property
    def concept_code(self):
        """
        Gets the concept_code of this Concept.
        Code for the concept in its vocabulary (e.g. G8107)

        :return: The concept_code of this Concept.
        :rtype: str
        """
        return self._concept_code

    @concept_code.setter
    def concept_code(self, concept_code):
        """
        Sets the concept_code of this Concept.
        Code for the concept in its vocabulary (e.g. G8107)

        :param concept_code: The concept_code of this Concept.
        :type: str
        """
        if concept_code is None:
            raise ValueError("Invalid value for `concept_code`, must not be `None`")

        self._concept_code = concept_code

    @property
    def concept_class_id(self):
        """
        Gets the concept_class_id of this Concept.
        Class of the concept (e.g. Ingredient)

        :return: The concept_class_id of this Concept.
        :rtype: str
        """
        return self._concept_class_id

    @concept_class_id.setter
    def concept_class_id(self, concept_class_id):
        """
        Sets the concept_class_id of this Concept.
        Class of the concept (e.g. Ingredient)

        :param concept_class_id: The concept_class_id of this Concept.
        :type: str
        """
        if concept_class_id is None:
            raise ValueError("Invalid value for `concept_class_id`, must not be `None`")

        self._concept_class_id = concept_class_id

    @property
    def standard_concept(self):
        """
        Gets the standard_concept of this Concept.
        True if this is a standard concept, false otherwise

        :return: The standard_concept of this Concept.
        :rtype: bool
        """
        return self._standard_concept

    @standard_concept.setter
    def standard_concept(self, standard_concept):
        """
        Sets the standard_concept of this Concept.
        True if this is a standard concept, false otherwise

        :param standard_concept: The standard_concept of this Concept.
        :type: bool
        """
        if standard_concept is None:
            raise ValueError("Invalid value for `standard_concept`, must not be `None`")

        self._standard_concept = standard_concept

    @property
    def count_value(self):
        """
        Gets the count_value of this Concept.
        Count of participants matching this concept in the CDR

        :return: The count_value of this Concept.
        :rtype: int
        """
        return self._count_value

    @count_value.setter
    def count_value(self, count_value):
        """
        Sets the count_value of this Concept.
        Count of participants matching this concept in the CDR

        :param count_value: The count_value of this Concept.
        :type: int
        """
        if count_value is None:
            raise ValueError("Invalid value for `count_value`, must not be `None`")

        self._count_value = count_value

    @property
    def prevalence(self):
        """
        Gets the prevalence of this Concept.
        Prevalence among participants in the CDR (a percentage of the total)

        :return: The prevalence of this Concept.
        :rtype: float
        """
        return self._prevalence

    @prevalence.setter
    def prevalence(self, prevalence):
        """
        Sets the prevalence of this Concept.
        Prevalence among participants in the CDR (a percentage of the total)

        :param prevalence: The prevalence of this Concept.
        :type: float
        """
        if prevalence is None:
            raise ValueError("Invalid value for `prevalence`, must not be `None`")

        self._prevalence = prevalence

    @property
    def concept_synonyms(self):
        """
        Gets the concept_synonyms of this Concept.
        concept synonym names

        :return: The concept_synonyms of this Concept.
        :rtype: list[str]
        """
        return self._concept_synonyms

    @concept_synonyms.setter
    def concept_synonyms(self, concept_synonyms):
        """
        Sets the concept_synonyms of this Concept.
        concept synonym names

        :param concept_synonyms: The concept_synonyms of this Concept.
        :type: list[str]
        """

        self._concept_synonyms = concept_synonyms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Concept):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
