# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CohortAnnotationDefinition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cohort_annotation_definition_id': 'int',
        'cohort_id': 'int',
        'column_name': 'str',
        'annotation_type': 'AnnotationType',
        'enum_values': 'list[str]'
    }

    attribute_map = {
        'cohort_annotation_definition_id': 'cohortAnnotationDefinitionId',
        'cohort_id': 'cohortId',
        'column_name': 'columnName',
        'annotation_type': 'annotationType',
        'enum_values': 'enumValues'
    }

    def __init__(self, cohort_annotation_definition_id=None, cohort_id=None, column_name=None, annotation_type=None, enum_values=None):
        """
        CohortAnnotationDefinition - a model defined in Swagger
        """

        self._cohort_annotation_definition_id = None
        self._cohort_id = None
        self._column_name = None
        self._annotation_type = None
        self._enum_values = None
        self.discriminator = None

        if cohort_annotation_definition_id is not None:
          self.cohort_annotation_definition_id = cohort_annotation_definition_id
        self.cohort_id = cohort_id
        self.column_name = column_name
        self.annotation_type = annotation_type
        if enum_values is not None:
          self.enum_values = enum_values

    @property
    def cohort_annotation_definition_id(self):
        """
        Gets the cohort_annotation_definition_id of this CohortAnnotationDefinition.
        the annotation definition id.

        :return: The cohort_annotation_definition_id of this CohortAnnotationDefinition.
        :rtype: int
        """
        return self._cohort_annotation_definition_id

    @cohort_annotation_definition_id.setter
    def cohort_annotation_definition_id(self, cohort_annotation_definition_id):
        """
        Sets the cohort_annotation_definition_id of this CohortAnnotationDefinition.
        the annotation definition id.

        :param cohort_annotation_definition_id: The cohort_annotation_definition_id of this CohortAnnotationDefinition.
        :type: int
        """

        self._cohort_annotation_definition_id = cohort_annotation_definition_id

    @property
    def cohort_id(self):
        """
        Gets the cohort_id of this CohortAnnotationDefinition.
        the cohort id.

        :return: The cohort_id of this CohortAnnotationDefinition.
        :rtype: int
        """
        return self._cohort_id

    @cohort_id.setter
    def cohort_id(self, cohort_id):
        """
        Sets the cohort_id of this CohortAnnotationDefinition.
        the cohort id.

        :param cohort_id: The cohort_id of this CohortAnnotationDefinition.
        :type: int
        """
        if cohort_id is None:
            raise ValueError("Invalid value for `cohort_id`, must not be `None`")

        self._cohort_id = cohort_id

    @property
    def column_name(self):
        """
        Gets the column_name of this CohortAnnotationDefinition.
        the name of this annotation.

        :return: The column_name of this CohortAnnotationDefinition.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this CohortAnnotationDefinition.
        the name of this annotation.

        :param column_name: The column_name of this CohortAnnotationDefinition.
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def annotation_type(self):
        """
        Gets the annotation_type of this CohortAnnotationDefinition.

        :return: The annotation_type of this CohortAnnotationDefinition.
        :rtype: AnnotationType
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """
        Sets the annotation_type of this CohortAnnotationDefinition.

        :param annotation_type: The annotation_type of this CohortAnnotationDefinition.
        :type: AnnotationType
        """
        if annotation_type is None:
            raise ValueError("Invalid value for `annotation_type`, must not be `None`")

        self._annotation_type = annotation_type

    @property
    def enum_values(self):
        """
        Gets the enum_values of this CohortAnnotationDefinition.

        :return: The enum_values of this CohortAnnotationDefinition.
        :rtype: list[str]
        """
        return self._enum_values

    @enum_values.setter
    def enum_values(self, enum_values):
        """
        Sets the enum_values of this CohortAnnotationDefinition.

        :param enum_values: The enum_values of this CohortAnnotationDefinition.
        :type: list[str]
        """

        self._enum_values = enum_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CohortAnnotationDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
