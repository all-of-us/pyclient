# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateAccountRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile': 'Profile',
        'password': 'str',
        'invitation_key': 'str'
    }

    attribute_map = {
        'profile': 'profile',
        'password': 'password',
        'invitation_key': 'invitationKey'
    }

    def __init__(self, profile=None, password=None, invitation_key=None):
        """
        CreateAccountRequest - a model defined in Swagger
        """

        self._profile = None
        self._password = None
        self._invitation_key = None
        self.discriminator = None

        if profile is not None:
          self.profile = profile
        self.password = password
        if invitation_key is not None:
          self.invitation_key = invitation_key

    @property
    def profile(self):
        """
        Gets the profile of this CreateAccountRequest.

        :return: The profile of this CreateAccountRequest.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this CreateAccountRequest.

        :param profile: The profile of this CreateAccountRequest.
        :type: Profile
        """

        self._profile = profile

    @property
    def password(self):
        """
        Gets the password of this CreateAccountRequest.

        :return: The password of this CreateAccountRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this CreateAccountRequest.

        :param password: The password of this CreateAccountRequest.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def invitation_key(self):
        """
        Gets the invitation_key of this CreateAccountRequest.

        :return: The invitation_key of this CreateAccountRequest.
        :rtype: str
        """
        return self._invitation_key

    @invitation_key.setter
    def invitation_key(self, invitation_key):
        """
        Sets the invitation_key of this CreateAccountRequest.

        :param invitation_key: The invitation_key of this CreateAccountRequest.
        :type: str
        """

        self._invitation_key = invitation_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
