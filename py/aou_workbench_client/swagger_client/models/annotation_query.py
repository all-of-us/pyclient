# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AnnotationQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[str]',
        'order_by': 'list[str]'
    }

    attribute_map = {
        'columns': 'columns',
        'order_by': 'orderBy'
    }

    def __init__(self, columns=None, order_by=None):
        """
        AnnotationQuery - a model defined in Swagger
        """

        self._columns = None
        self._order_by = None
        self.discriminator = None

        if columns is not None:
          self.columns = columns
        if order_by is not None:
          self.order_by = order_by

    @property
    def columns(self):
        """
        Gets the columns of this AnnotationQuery.
        An array of names of annotations to retrieve about participants, or \"review_status\" for the cohort review status of the participant or \"person_id\" for the ID of the participant. Defaults to \"person_id\", \"review_status\", and the names of all defined annotations in the cohort review. This is only valid in combination with the use of cohortName above. Only data for participants in the cohort review will be returned; if no cohort review has been created, no results will be returned. 

        :return: The columns of this AnnotationQuery.
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """
        Sets the columns of this AnnotationQuery.
        An array of names of annotations to retrieve about participants, or \"review_status\" for the cohort review status of the participant or \"person_id\" for the ID of the participant. Defaults to \"person_id\", \"review_status\", and the names of all defined annotations in the cohort review. This is only valid in combination with the use of cohortName above. Only data for participants in the cohort review will be returned; if no cohort review has been created, no results will be returned. 

        :param columns: The columns of this AnnotationQuery.
        :type: list[str]
        """

        self._columns = columns

    @property
    def order_by(self):
        """
        Gets the order_by of this AnnotationQuery.
        An array of names of annotations, or \"review status\" or \"person_id\", each one optionally enclosed in \"DESCENDING()\" for descending sort order. Specifies the order that results should be returned. Defaults to \"person_id\" (in ascending order). Annotations referenced in orderBy must also be present in columns. 

        :return: The order_by of this AnnotationQuery.
        :rtype: list[str]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """
        Sets the order_by of this AnnotationQuery.
        An array of names of annotations, or \"review status\" or \"person_id\", each one optionally enclosed in \"DESCENDING()\" for descending sort order. Specifies the order that results should be returned. Defaults to \"person_id\" (in ascending order). Annotations referenced in orderBy must also be present in columns. 

        :param order_by: The order_by of this AnnotationQuery.
        :type: list[str]
        """

        self._order_by = order_by

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AnnotationQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
