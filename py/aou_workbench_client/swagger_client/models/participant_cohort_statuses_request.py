# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParticipantCohortStatusesRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'page_size': 'int',
        'sort_column': 'ParticipantCohortStatusColumns',
        'sort_order': 'SortOrder',
        'filters': 'FilterList'
    }

    attribute_map = {
        'page': 'page',
        'page_size': 'pageSize',
        'sort_column': 'sortColumn',
        'sort_order': 'sortOrder',
        'filters': 'filters'
    }

    def __init__(self, page=None, page_size=None, sort_column=None, sort_order=None, filters=None):
        """
        ParticipantCohortStatusesRequest - a model defined in Swagger
        """

        self._page = None
        self._page_size = None
        self._sort_column = None
        self._sort_order = None
        self._filters = None
        self.discriminator = None

        self.page = page
        self.page_size = page_size
        self.sort_column = sort_column
        self.sort_order = sort_order
        if filters is not None:
          self.filters = filters

    @property
    def page(self):
        """
        Gets the page of this ParticipantCohortStatusesRequest.
        specific page (default is 0)

        :return: The page of this ParticipantCohortStatusesRequest.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this ParticipantCohortStatusesRequest.
        specific page (default is 0)

        :param page: The page of this ParticipantCohortStatusesRequest.
        :type: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this ParticipantCohortStatusesRequest.
        page size of results (default is 25)

        :return: The page_size of this ParticipantCohortStatusesRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this ParticipantCohortStatusesRequest.
        page size of results (default is 25)

        :param page_size: The page_size of this ParticipantCohortStatusesRequest.
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")

        self._page_size = page_size

    @property
    def sort_column(self):
        """
        Gets the sort_column of this ParticipantCohortStatusesRequest.
        Column upon which to sort (default is 'participantId')

        :return: The sort_column of this ParticipantCohortStatusesRequest.
        :rtype: ParticipantCohortStatusColumns
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """
        Sets the sort_column of this ParticipantCohortStatusesRequest.
        Column upon which to sort (default is 'participantId')

        :param sort_column: The sort_column of this ParticipantCohortStatusesRequest.
        :type: ParticipantCohortStatusColumns
        """
        if sort_column is None:
            raise ValueError("Invalid value for `sort_column`, must not be `None`")

        self._sort_column = sort_column

    @property
    def sort_order(self):
        """
        Gets the sort_order of this ParticipantCohortStatusesRequest.
        Sort direction (default is ascending)

        :return: The sort_order of this ParticipantCohortStatusesRequest.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this ParticipantCohortStatusesRequest.
        Sort direction (default is ascending)

        :param sort_order: The sort_order of this ParticipantCohortStatusesRequest.
        :type: SortOrder
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def filters(self):
        """
        Gets the filters of this ParticipantCohortStatusesRequest.

        :return: The filters of this ParticipantCohortStatusesRequest.
        :rtype: FilterList
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """
        Sets the filters of this ParticipantCohortStatusesRequest.

        :param filters: The filters of this ParticipantCohortStatusesRequest.
        :type: FilterList
        """

        self._filters = filters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParticipantCohortStatusesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
