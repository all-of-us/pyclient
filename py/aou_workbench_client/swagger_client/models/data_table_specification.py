# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DataTableSpecification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cohort_name': 'str',
        'cohort_spec': 'str',
        'status_filter': 'list[CohortStatus]',
        'cdr_version_name': 'str',
        'table_query': 'TableQuery',
        'max_results': 'int'
    }

    attribute_map = {
        'cohort_name': 'cohortName',
        'cohort_spec': 'cohortSpec',
        'status_filter': 'statusFilter',
        'cdr_version_name': 'cdrVersionName',
        'table_query': 'tableQuery',
        'max_results': 'maxResults'
    }

    def __init__(self, cohort_name=None, cohort_spec=None, status_filter=None, cdr_version_name=None, table_query=None, max_results=None):
        """
        DataTableSpecification - a model defined in Swagger
        """

        self._cohort_name = None
        self._cohort_spec = None
        self._status_filter = None
        self._cdr_version_name = None
        self._table_query = None
        self._max_results = None
        self.discriminator = None

        if cohort_name is not None:
          self.cohort_name = cohort_name
        if cohort_spec is not None:
          self.cohort_spec = cohort_spec
        if status_filter is not None:
          self.status_filter = status_filter
        if cdr_version_name is not None:
          self.cdr_version_name = cdr_version_name
        if table_query is not None:
          self.table_query = table_query
        if max_results is not None:
          self.max_results = max_results

    @property
    def cohort_name(self):
        """
        Gets the cohort_name of this DataTableSpecification.
        The name of a cohort that data should be retrieved for. This and cohortSpec should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR. 

        :return: The cohort_name of this DataTableSpecification.
        :rtype: str
        """
        return self._cohort_name

    @cohort_name.setter
    def cohort_name(self, cohort_name):
        """
        Sets the cohort_name of this DataTableSpecification.
        The name of a cohort that data should be retrieved for. This and cohortSpec should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR. 

        :param cohort_name: The cohort_name of this DataTableSpecification.
        :type: str
        """

        self._cohort_name = cohort_name

    @property
    def cohort_spec(self):
        """
        Gets the cohort_spec of this DataTableSpecification.
        JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). This and cohortName should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR. 

        :return: The cohort_spec of this DataTableSpecification.
        :rtype: str
        """
        return self._cohort_spec

    @cohort_spec.setter
    def cohort_spec(self, cohort_spec):
        """
        Sets the cohort_spec of this DataTableSpecification.
        JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). This and cohortName should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR. 

        :param cohort_spec: The cohort_spec of this DataTableSpecification.
        :type: str
        """

        self._cohort_spec = cohort_spec

    @property
    def status_filter(self):
        """
        Gets the status_filter of this DataTableSpecification.
        An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.) 

        :return: The status_filter of this DataTableSpecification.
        :rtype: list[CohortStatus]
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """
        Sets the status_filter of this DataTableSpecification.
        An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.) 

        :param status_filter: The status_filter of this DataTableSpecification.
        :type: list[CohortStatus]
        """

        self._status_filter = status_filter

    @property
    def cdr_version_name(self):
        """
        Gets the cdr_version_name of this DataTableSpecification.
        The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used 

        :return: The cdr_version_name of this DataTableSpecification.
        :rtype: str
        """
        return self._cdr_version_name

    @cdr_version_name.setter
    def cdr_version_name(self, cdr_version_name):
        """
        Sets the cdr_version_name of this DataTableSpecification.
        The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used 

        :param cdr_version_name: The cdr_version_name of this DataTableSpecification.
        :type: str
        """

        self._cdr_version_name = cdr_version_name

    @property
    def table_query(self):
        """
        Gets the table_query of this DataTableSpecification.
        A query specifying how to pull data out of a single table. If tableQuery is not specified, just Person.person_id will be extracted. 

        :return: The table_query of this DataTableSpecification.
        :rtype: TableQuery
        """
        return self._table_query

    @table_query.setter
    def table_query(self, table_query):
        """
        Sets the table_query of this DataTableSpecification.
        A query specifying how to pull data out of a single table. If tableQuery is not specified, just Person.person_id will be extracted. 

        :param table_query: The table_query of this DataTableSpecification.
        :type: TableQuery
        """

        self._table_query = table_query

    @property
    def max_results(self):
        """
        Gets the max_results of this DataTableSpecification.
        The maximum number of results returned in the data table. Defaults to no limit (all matching results are returned.) 

        :return: The max_results of this DataTableSpecification.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """
        Sets the max_results of this DataTableSpecification.
        The maximum number of results returned in the data table. Defaults to no limit (all matching results are returned.) 

        :param max_results: The max_results of this DataTableSpecification.
        :type: int
        """

        self._max_results = max_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DataTableSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
