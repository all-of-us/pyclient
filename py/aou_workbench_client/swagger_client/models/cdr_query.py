# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CdrQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sql': 'str',
        'configuration': 'object',
        'bigquery_project': 'str',
        'bigquery_dataset': 'str'
    }

    attribute_map = {
        'sql': 'sql',
        'configuration': 'configuration',
        'bigquery_project': 'bigqueryProject',
        'bigquery_dataset': 'bigqueryDataset'
    }

    def __init__(self, sql=None, configuration=None, bigquery_project=None, bigquery_dataset=None):
        """
        CdrQuery - a model defined in Swagger
        """

        self._sql = None
        self._configuration = None
        self._bigquery_project = None
        self._bigquery_dataset = None
        self.discriminator = None

        if sql is not None:
          self.sql = sql
        if configuration is not None:
          self.configuration = configuration
        self.bigquery_project = bigquery_project
        self.bigquery_dataset = bigquery_dataset

    @property
    def sql(self):
        """
        Gets the sql of this CdrQuery.
        Google SQL to use when querying the CDR. If empty, it means no participants can possibly match the data table specification, and an empty data table should be returned. 

        :return: The sql of this CdrQuery.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """
        Sets the sql of this CdrQuery.
        Google SQL to use when querying the CDR. If empty, it means no participants can possibly match the data table specification, and an empty data table should be returned. 

        :param sql: The sql of this CdrQuery.
        :type: str
        """

        self._sql = sql

    @property
    def configuration(self):
        """
        Gets the configuration of this CdrQuery.
        configuration for the BigQuery job (includes named parameters); you can pass this JSON dictionary in for the configuration when calling methods like pandas.read_gbq(). 

        :return: The configuration of this CdrQuery.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this CdrQuery.
        configuration for the BigQuery job (includes named parameters); you can pass this JSON dictionary in for the configuration when calling methods like pandas.read_gbq(). 

        :param configuration: The configuration of this CdrQuery.
        :type: object
        """

        self._configuration = configuration

    @property
    def bigquery_project(self):
        """
        Gets the bigquery_project of this CdrQuery.
        name of the Google Cloud project containing the CDR dataset

        :return: The bigquery_project of this CdrQuery.
        :rtype: str
        """
        return self._bigquery_project

    @bigquery_project.setter
    def bigquery_project(self, bigquery_project):
        """
        Sets the bigquery_project of this CdrQuery.
        name of the Google Cloud project containing the CDR dataset

        :param bigquery_project: The bigquery_project of this CdrQuery.
        :type: str
        """
        if bigquery_project is None:
            raise ValueError("Invalid value for `bigquery_project`, must not be `None`")

        self._bigquery_project = bigquery_project

    @property
    def bigquery_dataset(self):
        """
        Gets the bigquery_dataset of this CdrQuery.
        name of the CDR BigQuery dataset

        :return: The bigquery_dataset of this CdrQuery.
        :rtype: str
        """
        return self._bigquery_dataset

    @bigquery_dataset.setter
    def bigquery_dataset(self, bigquery_dataset):
        """
        Sets the bigquery_dataset of this CdrQuery.
        name of the CDR BigQuery dataset

        :param bigquery_dataset: The bigquery_dataset of this CdrQuery.
        :type: str
        """
        if bigquery_dataset is None:
            raise ValueError("Invalid value for `bigquery_dataset`, must not be `None`")

        self._bigquery_dataset = bigquery_dataset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CdrQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
