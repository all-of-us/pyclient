# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BugReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_description': 'str',
        'repro_steps': 'str',
        'contact_email': 'str'
    }

    attribute_map = {
        'short_description': 'shortDescription',
        'repro_steps': 'reproSteps',
        'contact_email': 'contactEmail'
    }

    def __init__(self, short_description=None, repro_steps=None, contact_email=None):
        """
        BugReport - a model defined in Swagger
        """

        self._short_description = None
        self._repro_steps = None
        self._contact_email = None
        self.discriminator = None

        self.short_description = short_description
        self.repro_steps = repro_steps
        self.contact_email = contact_email

    @property
    def short_description(self):
        """
        Gets the short_description of this BugReport.
        A short description of the bug

        :return: The short_description of this BugReport.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this BugReport.
        A short description of the bug

        :param short_description: The short_description of this BugReport.
        :type: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")

        self._short_description = short_description

    @property
    def repro_steps(self):
        """
        Gets the repro_steps of this BugReport.
        Steps to reproduce the bug

        :return: The repro_steps of this BugReport.
        :rtype: str
        """
        return self._repro_steps

    @repro_steps.setter
    def repro_steps(self, repro_steps):
        """
        Sets the repro_steps of this BugReport.
        Steps to reproduce the bug

        :param repro_steps: The repro_steps of this BugReport.
        :type: str
        """
        if repro_steps is None:
            raise ValueError("Invalid value for `repro_steps`, must not be `None`")

        self._repro_steps = repro_steps

    @property
    def contact_email(self):
        """
        Gets the contact_email of this BugReport.
        The email with which to contact the bug reporter.

        :return: The contact_email of this BugReport.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """
        Sets the contact_email of this BugReport.
        The email with which to contact the bug reporter.

        :param contact_email: The contact_email of this BugReport.
        :type: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")

        self._contact_email = contact_email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BugReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
