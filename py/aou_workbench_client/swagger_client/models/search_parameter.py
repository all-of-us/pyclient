# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchParameter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameter_id': 'str',
        'name': 'str',
        'value': 'str',
        'type': 'str',
        'subtype': 'str',
        'group': 'bool',
        'domain': 'str',
        'concept_id': 'int',
        'attribute': 'Attribute'
    }

    attribute_map = {
        'parameter_id': 'parameterId',
        'name': 'name',
        'value': 'value',
        'type': 'type',
        'subtype': 'subtype',
        'group': 'group',
        'domain': 'domain',
        'concept_id': 'conceptId',
        'attribute': 'attribute'
    }

    def __init__(self, parameter_id=None, name=None, value=None, type=None, subtype=None, group=None, domain=None, concept_id=None, attribute=None):
        """
        SearchParameter - a model defined in Swagger
        """

        self._parameter_id = None
        self._name = None
        self._value = None
        self._type = None
        self._subtype = None
        self._group = None
        self._domain = None
        self._concept_id = None
        self._attribute = None
        self.discriminator = None

        self.parameter_id = parameter_id
        self.name = name
        self.value = value
        self.type = type
        self.subtype = subtype
        self.group = group
        if domain is not None:
          self.domain = domain
        if concept_id is not None:
          self.concept_id = concept_id
        if attribute is not None:
          self.attribute = attribute

    @property
    def parameter_id(self):
        """
        Gets the parameter_id of this SearchParameter.
        Unique within the cohort definition

        :return: The parameter_id of this SearchParameter.
        :rtype: str
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """
        Sets the parameter_id of this SearchParameter.
        Unique within the cohort definition

        :param parameter_id: The parameter_id of this SearchParameter.
        :type: str
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")

        self._parameter_id = parameter_id

    @property
    def name(self):
        """
        Gets the name of this SearchParameter.
        The name of the generating Criterion

        :return: The name of this SearchParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SearchParameter.
        The name of the generating Criterion

        :param name: The name of this SearchParameter.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this SearchParameter.
        The Value of the Criteria within its Category Tree

        :return: The value of this SearchParameter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this SearchParameter.
        The Value of the Criteria within its Category Tree

        :param value: The value of this SearchParameter.
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def type(self):
        """
        Gets the type of this SearchParameter.
        The type of the generating Criterion

        :return: The type of this SearchParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SearchParameter.
        The type of the generating Criterion

        :param type: The type of this SearchParameter.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def subtype(self):
        """
        Gets the subtype of this SearchParameter.
        The subtype of the generating Criterion

        :return: The subtype of this SearchParameter.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """
        Sets the subtype of this SearchParameter.
        The subtype of the generating Criterion

        :param subtype: The subtype of this SearchParameter.
        :type: str
        """
        if subtype is None:
            raise ValueError("Invalid value for `subtype`, must not be `None`")

        self._subtype = subtype

    @property
    def group(self):
        """
        Gets the group of this SearchParameter.
        Specifies if the generating Criterion is a leaf or node in its Criteria tree

        :return: The group of this SearchParameter.
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this SearchParameter.
        Specifies if the generating Criterion is a leaf or node in its Criteria tree

        :param group: The group of this SearchParameter.
        :type: bool
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def domain(self):
        """
        Gets the domain of this SearchParameter.
        clue to determine which tables to search

        :return: The domain of this SearchParameter.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this SearchParameter.
        clue to determine which tables to search

        :param domain: The domain of this SearchParameter.
        :type: str
        """

        self._domain = domain

    @property
    def concept_id(self):
        """
        Gets the concept_id of this SearchParameter.
        The concept id that maps to concept table.

        :return: The concept_id of this SearchParameter.
        :rtype: int
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """
        Sets the concept_id of this SearchParameter.
        The concept id that maps to concept table.

        :param concept_id: The concept_id of this SearchParameter.
        :type: int
        """

        self._concept_id = concept_id

    @property
    def attribute(self):
        """
        Gets the attribute of this SearchParameter.
        Any applicable arguments that complete the sense of the parameter

        :return: The attribute of this SearchParameter.
        :rtype: Attribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """
        Sets the attribute of this SearchParameter.
        Any applicable arguments that complete the sense of the parameter

        :param attribute: The attribute of this SearchParameter.
        :type: Attribute
        """

        self._attribute = attribute

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
