# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResearchPurpose(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disease_focused_research': 'bool',
        'disease_of_focus': 'str',
        'methods_development': 'bool',
        'control_set': 'bool',
        'aggregate_analysis': 'bool',
        'ancestry': 'bool',
        'commercial_purpose': 'bool',
        'population': 'bool',
        'population_of_focus': 'str',
        'review_requested': 'bool',
        'time_requested': 'int',
        'approved': 'bool',
        'time_reviewed': 'int',
        'additional_notes': 'str'
    }

    attribute_map = {
        'disease_focused_research': 'diseaseFocusedResearch',
        'disease_of_focus': 'diseaseOfFocus',
        'methods_development': 'methodsDevelopment',
        'control_set': 'controlSet',
        'aggregate_analysis': 'aggregateAnalysis',
        'ancestry': 'ancestry',
        'commercial_purpose': 'commercialPurpose',
        'population': 'population',
        'population_of_focus': 'populationOfFocus',
        'review_requested': 'reviewRequested',
        'time_requested': 'timeRequested',
        'approved': 'approved',
        'time_reviewed': 'timeReviewed',
        'additional_notes': 'additionalNotes'
    }

    def __init__(self, disease_focused_research=False, disease_of_focus=None, methods_development=False, control_set=False, aggregate_analysis=False, ancestry=False, commercial_purpose=False, population=False, population_of_focus=None, review_requested=False, time_requested=None, approved=None, time_reviewed=None, additional_notes=None):
        """
        ResearchPurpose - a model defined in Swagger
        """

        self._disease_focused_research = None
        self._disease_of_focus = None
        self._methods_development = None
        self._control_set = None
        self._aggregate_analysis = None
        self._ancestry = None
        self._commercial_purpose = None
        self._population = None
        self._population_of_focus = None
        self._review_requested = None
        self._time_requested = None
        self._approved = None
        self._time_reviewed = None
        self._additional_notes = None
        self.discriminator = None

        self.disease_focused_research = disease_focused_research
        if disease_of_focus is not None:
          self.disease_of_focus = disease_of_focus
        self.methods_development = methods_development
        self.control_set = control_set
        self.aggregate_analysis = aggregate_analysis
        self.ancestry = ancestry
        self.commercial_purpose = commercial_purpose
        self.population = population
        if population_of_focus is not None:
          self.population_of_focus = population_of_focus
        self.review_requested = review_requested
        if time_requested is not None:
          self.time_requested = time_requested
        if approved is not None:
          self.approved = approved
        if time_reviewed is not None:
          self.time_reviewed = time_reviewed
        if additional_notes is not None:
          self.additional_notes = additional_notes

    @property
    def disease_focused_research(self):
        """
        Gets the disease_focused_research of this ResearchPurpose.

        :return: The disease_focused_research of this ResearchPurpose.
        :rtype: bool
        """
        return self._disease_focused_research

    @disease_focused_research.setter
    def disease_focused_research(self, disease_focused_research):
        """
        Sets the disease_focused_research of this ResearchPurpose.

        :param disease_focused_research: The disease_focused_research of this ResearchPurpose.
        :type: bool
        """
        if disease_focused_research is None:
            raise ValueError("Invalid value for `disease_focused_research`, must not be `None`")

        self._disease_focused_research = disease_focused_research

    @property
    def disease_of_focus(self):
        """
        Gets the disease_of_focus of this ResearchPurpose.

        :return: The disease_of_focus of this ResearchPurpose.
        :rtype: str
        """
        return self._disease_of_focus

    @disease_of_focus.setter
    def disease_of_focus(self, disease_of_focus):
        """
        Sets the disease_of_focus of this ResearchPurpose.

        :param disease_of_focus: The disease_of_focus of this ResearchPurpose.
        :type: str
        """

        self._disease_of_focus = disease_of_focus

    @property
    def methods_development(self):
        """
        Gets the methods_development of this ResearchPurpose.

        :return: The methods_development of this ResearchPurpose.
        :rtype: bool
        """
        return self._methods_development

    @methods_development.setter
    def methods_development(self, methods_development):
        """
        Sets the methods_development of this ResearchPurpose.

        :param methods_development: The methods_development of this ResearchPurpose.
        :type: bool
        """
        if methods_development is None:
            raise ValueError("Invalid value for `methods_development`, must not be `None`")

        self._methods_development = methods_development

    @property
    def control_set(self):
        """
        Gets the control_set of this ResearchPurpose.

        :return: The control_set of this ResearchPurpose.
        :rtype: bool
        """
        return self._control_set

    @control_set.setter
    def control_set(self, control_set):
        """
        Sets the control_set of this ResearchPurpose.

        :param control_set: The control_set of this ResearchPurpose.
        :type: bool
        """
        if control_set is None:
            raise ValueError("Invalid value for `control_set`, must not be `None`")

        self._control_set = control_set

    @property
    def aggregate_analysis(self):
        """
        Gets the aggregate_analysis of this ResearchPurpose.

        :return: The aggregate_analysis of this ResearchPurpose.
        :rtype: bool
        """
        return self._aggregate_analysis

    @aggregate_analysis.setter
    def aggregate_analysis(self, aggregate_analysis):
        """
        Sets the aggregate_analysis of this ResearchPurpose.

        :param aggregate_analysis: The aggregate_analysis of this ResearchPurpose.
        :type: bool
        """
        if aggregate_analysis is None:
            raise ValueError("Invalid value for `aggregate_analysis`, must not be `None`")

        self._aggregate_analysis = aggregate_analysis

    @property
    def ancestry(self):
        """
        Gets the ancestry of this ResearchPurpose.

        :return: The ancestry of this ResearchPurpose.
        :rtype: bool
        """
        return self._ancestry

    @ancestry.setter
    def ancestry(self, ancestry):
        """
        Sets the ancestry of this ResearchPurpose.

        :param ancestry: The ancestry of this ResearchPurpose.
        :type: bool
        """
        if ancestry is None:
            raise ValueError("Invalid value for `ancestry`, must not be `None`")

        self._ancestry = ancestry

    @property
    def commercial_purpose(self):
        """
        Gets the commercial_purpose of this ResearchPurpose.

        :return: The commercial_purpose of this ResearchPurpose.
        :rtype: bool
        """
        return self._commercial_purpose

    @commercial_purpose.setter
    def commercial_purpose(self, commercial_purpose):
        """
        Sets the commercial_purpose of this ResearchPurpose.

        :param commercial_purpose: The commercial_purpose of this ResearchPurpose.
        :type: bool
        """
        if commercial_purpose is None:
            raise ValueError("Invalid value for `commercial_purpose`, must not be `None`")

        self._commercial_purpose = commercial_purpose

    @property
    def population(self):
        """
        Gets the population of this ResearchPurpose.

        :return: The population of this ResearchPurpose.
        :rtype: bool
        """
        return self._population

    @population.setter
    def population(self, population):
        """
        Sets the population of this ResearchPurpose.

        :param population: The population of this ResearchPurpose.
        :type: bool
        """
        if population is None:
            raise ValueError("Invalid value for `population`, must not be `None`")

        self._population = population

    @property
    def population_of_focus(self):
        """
        Gets the population_of_focus of this ResearchPurpose.

        :return: The population_of_focus of this ResearchPurpose.
        :rtype: str
        """
        return self._population_of_focus

    @population_of_focus.setter
    def population_of_focus(self, population_of_focus):
        """
        Sets the population_of_focus of this ResearchPurpose.

        :param population_of_focus: The population_of_focus of this ResearchPurpose.
        :type: str
        """

        self._population_of_focus = population_of_focus

    @property
    def review_requested(self):
        """
        Gets the review_requested of this ResearchPurpose.

        :return: The review_requested of this ResearchPurpose.
        :rtype: bool
        """
        return self._review_requested

    @review_requested.setter
    def review_requested(self, review_requested):
        """
        Sets the review_requested of this ResearchPurpose.

        :param review_requested: The review_requested of this ResearchPurpose.
        :type: bool
        """
        if review_requested is None:
            raise ValueError("Invalid value for `review_requested`, must not be `None`")

        self._review_requested = review_requested

    @property
    def time_requested(self):
        """
        Gets the time_requested of this ResearchPurpose.
        Milliseconds since the UNIX epoch.

        :return: The time_requested of this ResearchPurpose.
        :rtype: int
        """
        return self._time_requested

    @time_requested.setter
    def time_requested(self, time_requested):
        """
        Sets the time_requested of this ResearchPurpose.
        Milliseconds since the UNIX epoch.

        :param time_requested: The time_requested of this ResearchPurpose.
        :type: int
        """

        self._time_requested = time_requested

    @property
    def approved(self):
        """
        Gets the approved of this ResearchPurpose.

        :return: The approved of this ResearchPurpose.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """
        Sets the approved of this ResearchPurpose.

        :param approved: The approved of this ResearchPurpose.
        :type: bool
        """

        self._approved = approved

    @property
    def time_reviewed(self):
        """
        Gets the time_reviewed of this ResearchPurpose.
        Milliseconds since the UNIX epoch.

        :return: The time_reviewed of this ResearchPurpose.
        :rtype: int
        """
        return self._time_reviewed

    @time_reviewed.setter
    def time_reviewed(self, time_reviewed):
        """
        Sets the time_reviewed of this ResearchPurpose.
        Milliseconds since the UNIX epoch.

        :param time_reviewed: The time_reviewed of this ResearchPurpose.
        :type: int
        """

        self._time_reviewed = time_reviewed

    @property
    def additional_notes(self):
        """
        Gets the additional_notes of this ResearchPurpose.

        :return: The additional_notes of this ResearchPurpose.
        :rtype: str
        """
        return self._additional_notes

    @additional_notes.setter
    def additional_notes(self, additional_notes):
        """
        Sets the additional_notes of this ResearchPurpose.

        :param additional_notes: The additional_notes of this ResearchPurpose.
        :type: str
        """

        self._additional_notes = additional_notes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResearchPurpose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
