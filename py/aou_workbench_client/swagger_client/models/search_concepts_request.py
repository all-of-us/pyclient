# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchConceptsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'standard_concept_filter': 'StandardConceptFilter',
        'vocabulary_ids': 'list[str]',
        'domain': 'Domain',
        'max_results': 'int'
    }

    attribute_map = {
        'query': 'query',
        'standard_concept_filter': 'standardConceptFilter',
        'vocabulary_ids': 'vocabularyIds',
        'domain': 'domain',
        'max_results': 'maxResults'
    }

    def __init__(self, query=None, standard_concept_filter=None, vocabulary_ids=None, domain=None, max_results=None):
        """
        SearchConceptsRequest - a model defined in Swagger
        """

        self._query = None
        self._standard_concept_filter = None
        self._vocabulary_ids = None
        self._domain = None
        self._max_results = None
        self.discriminator = None

        self.query = query
        if standard_concept_filter is not None:
          self.standard_concept_filter = standard_concept_filter
        if vocabulary_ids is not None:
          self.vocabulary_ids = vocabulary_ids
        if domain is not None:
          self.domain = domain
        if max_results is not None:
          self.max_results = max_results

    @property
    def query(self):
        """
        Gets the query of this SearchConceptsRequest.
        A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. 

        :return: The query of this SearchConceptsRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this SearchConceptsRequest.
        A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. 

        :param query: The query of this SearchConceptsRequest.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def standard_concept_filter(self):
        """
        Gets the standard_concept_filter of this SearchConceptsRequest.
        STANDARD_CONCEPTS if only standard concepts should be returned, NON_STANDARD_CONCEPTS if only non-standard concepts should be returned; defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts will be returned. 

        :return: The standard_concept_filter of this SearchConceptsRequest.
        :rtype: StandardConceptFilter
        """
        return self._standard_concept_filter

    @standard_concept_filter.setter
    def standard_concept_filter(self, standard_concept_filter):
        """
        Sets the standard_concept_filter of this SearchConceptsRequest.
        STANDARD_CONCEPTS if only standard concepts should be returned, NON_STANDARD_CONCEPTS if only non-standard concepts should be returned; defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts will be returned. 

        :param standard_concept_filter: The standard_concept_filter of this SearchConceptsRequest.
        :type: StandardConceptFilter
        """

        self._standard_concept_filter = standard_concept_filter

    @property
    def vocabulary_ids(self):
        """
        Gets the vocabulary_ids of this SearchConceptsRequest.
        The vocabulary ID for the concepts returned (e.g. SNOMED, RxNorm)

        :return: The vocabulary_ids of this SearchConceptsRequest.
        :rtype: list[str]
        """
        return self._vocabulary_ids

    @vocabulary_ids.setter
    def vocabulary_ids(self, vocabulary_ids):
        """
        Sets the vocabulary_ids of this SearchConceptsRequest.
        The vocabulary ID for the concepts returned (e.g. SNOMED, RxNorm)

        :param vocabulary_ids: The vocabulary_ids of this SearchConceptsRequest.
        :type: list[str]
        """

        self._vocabulary_ids = vocabulary_ids

    @property
    def domain(self):
        """
        Gets the domain of this SearchConceptsRequest.
        The domain for the concepts returned (e.g. OBSERVATION, DRUG). Note that this may map to multiple domain ID values in OMOP. 

        :return: The domain of this SearchConceptsRequest.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this SearchConceptsRequest.
        The domain for the concepts returned (e.g. OBSERVATION, DRUG). Note that this may map to multiple domain ID values in OMOP. 

        :param domain: The domain of this SearchConceptsRequest.
        :type: Domain
        """

        self._domain = domain

    @property
    def max_results(self):
        """
        Gets the max_results of this SearchConceptsRequest.
        The maximum number of results returned. Defaults to 20.

        :return: The max_results of this SearchConceptsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """
        Sets the max_results of this SearchConceptsRequest.
        The maximum number of results returned. Defaults to 20.

        :param max_results: The max_results of this SearchConceptsRequest.
        :type: int
        """

        self._max_results = max_results

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchConceptsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
