# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChartInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender': 'str',
        'race': 'str',
        'age_range': 'str',
        'count': 'int'
    }

    attribute_map = {
        'gender': 'gender',
        'race': 'race',
        'age_range': 'ageRange',
        'count': 'count'
    }

    def __init__(self, gender=None, race=None, age_range=None, count=None):
        """
        ChartInfo - a model defined in Swagger
        """

        self._gender = None
        self._race = None
        self._age_range = None
        self._count = None
        self.discriminator = None

        self.gender = gender
        self.race = race
        self.age_range = age_range
        self.count = count

    @property
    def gender(self):
        """
        Gets the gender of this ChartInfo.
        gender of subject

        :return: The gender of this ChartInfo.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this ChartInfo.
        gender of subject

        :param gender: The gender of this ChartInfo.
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def race(self):
        """
        Gets the race of this ChartInfo.
        race of subject

        :return: The race of this ChartInfo.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """
        Sets the race of this ChartInfo.
        race of subject

        :param race: The race of this ChartInfo.
        :type: str
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")

        self._race = race

    @property
    def age_range(self):
        """
        Gets the age_range of this ChartInfo.
        age range of subject

        :return: The age_range of this ChartInfo.
        :rtype: str
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """
        Sets the age_range of this ChartInfo.
        age range of subject

        :param age_range: The age_range of this ChartInfo.
        :type: str
        """
        if age_range is None:
            raise ValueError("Invalid value for `age_range`, must not be `None`")

        self._age_range = age_range

    @property
    def count(self):
        """
        Gets the count of this ChartInfo.
        number of subjects

        :return: The count of this ChartInfo.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this ChartInfo.
        number of subjects

        :param count: The count of this ChartInfo.
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChartInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
