# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ColumnFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_name': 'str',
        'operator': 'Operator',
        'value': 'str',
        'values': 'list[str]',
        'value_date': 'str',
        'value_number': 'float',
        'value_numbers': 'list[float]',
        'value_null': 'bool'
    }

    attribute_map = {
        'column_name': 'columnName',
        'operator': 'operator',
        'value': 'value',
        'values': 'values',
        'value_date': 'valueDate',
        'value_number': 'valueNumber',
        'value_numbers': 'valueNumbers',
        'value_null': 'valueNull'
    }

    def __init__(self, column_name=None, operator=None, value=None, values=None, value_date=None, value_number=None, value_numbers=None, value_null=None):
        """
        ColumnFilter - a model defined in Swagger
        """

        self._column_name = None
        self._operator = None
        self._value = None
        self._values = None
        self._value_date = None
        self._value_number = None
        self._value_numbers = None
        self._value_null = None
        self.discriminator = None

        self.column_name = column_name
        if operator is not None:
          self.operator = operator
        if value is not None:
          self.value = value
        if values is not None:
          self.values = values
        if value_date is not None:
          self.value_date = value_date
        if value_number is not None:
          self.value_number = value_number
        if value_numbers is not None:
          self.value_numbers = value_numbers
        if value_null is not None:
          self.value_null = value_null

    @property
    def column_name(self):
        """
        Gets the column_name of this ColumnFilter.
        The name of the column to filter on. 

        :return: The column_name of this ColumnFilter.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this ColumnFilter.
        The name of the column to filter on. 

        :param column_name: The column_name of this ColumnFilter.
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def operator(self):
        """
        Gets the operator of this ColumnFilter.
        The operator to use when comparing values. Defaults to EQUAL. If the \"in\" operator is used, either values or valueNumbers should be populated. 

        :return: The operator of this ColumnFilter.
        :rtype: Operator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this ColumnFilter.
        The operator to use when comparing values. Defaults to EQUAL. If the \"in\" operator is used, either values or valueNumbers should be populated. 

        :param operator: The operator of this ColumnFilter.
        :type: Operator
        """

        self._operator = operator

    @property
    def value(self):
        """
        Gets the value of this ColumnFilter.
        A string to use in comparisons (case-sensitive). 

        :return: The value of this ColumnFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ColumnFilter.
        A string to use in comparisons (case-sensitive). 

        :param value: The value of this ColumnFilter.
        :type: str
        """

        self._value = value

    @property
    def values(self):
        """
        Gets the values of this ColumnFilter.
        An array of strings to use in comparisons (case-sensitive); used with the \"in\" operator. 

        :return: The values of this ColumnFilter.
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this ColumnFilter.
        An array of strings to use in comparisons (case-sensitive); used with the \"in\" operator. 

        :param values: The values of this ColumnFilter.
        :type: list[str]
        """

        self._values = values

    @property
    def value_date(self):
        """
        Gets the value_date of this ColumnFilter.
        An ISO-formatted date / datetime value to use in comparisons. 

        :return: The value_date of this ColumnFilter.
        :rtype: str
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """
        Sets the value_date of this ColumnFilter.
        An ISO-formatted date / datetime value to use in comparisons. 

        :param value_date: The value_date of this ColumnFilter.
        :type: str
        """

        self._value_date = value_date

    @property
    def value_number(self):
        """
        Gets the value_number of this ColumnFilter.
        A number to use in comparisons (either integer or floating point.) 

        :return: The value_number of this ColumnFilter.
        :rtype: float
        """
        return self._value_number

    @value_number.setter
    def value_number(self, value_number):
        """
        Sets the value_number of this ColumnFilter.
        A number to use in comparisons (either integer or floating point.) 

        :param value_number: The value_number of this ColumnFilter.
        :type: float
        """

        self._value_number = value_number

    @property
    def value_numbers(self):
        """
        Gets the value_numbers of this ColumnFilter.
        An array of numbers to use in comparisons (used with the \"in\" operator) 

        :return: The value_numbers of this ColumnFilter.
        :rtype: list[float]
        """
        return self._value_numbers

    @value_numbers.setter
    def value_numbers(self, value_numbers):
        """
        Sets the value_numbers of this ColumnFilter.
        An array of numbers to use in comparisons (used with the \"in\" operator) 

        :param value_numbers: The value_numbers of this ColumnFilter.
        :type: list[float]
        """

        self._value_numbers = value_numbers

    @property
    def value_null(self):
        """
        Gets the value_null of this ColumnFilter.
        Set to true if the column value should be compared to null. 

        :return: The value_null of this ColumnFilter.
        :rtype: bool
        """
        return self._value_null

    @value_null.setter
    def value_null(self, value_null):
        """
        Sets the value_null of this ColumnFilter.
        Set to true if the column value should be compared to null. 

        :param value_null: The value_null of this ColumnFilter.
        :type: bool
        """

        self._value_null = value_null

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
