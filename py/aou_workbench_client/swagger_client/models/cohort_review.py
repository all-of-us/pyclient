# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CohortReview(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cohort_review_id': 'int',
        'cohort_id': 'int',
        'cdr_version_id': 'int',
        'creation_time': 'str',
        'matched_participant_count': 'int',
        'review_size': 'int',
        'reviewed_count': 'int',
        'review_status': 'ReviewStatus',
        'participant_cohort_statuses': 'list[ParticipantCohortStatus]',
        'page': 'int',
        'page_size': 'int',
        'sort_order': 'str',
        'sort_column': 'str'
    }

    attribute_map = {
        'cohort_review_id': 'cohortReviewId',
        'cohort_id': 'cohortId',
        'cdr_version_id': 'cdrVersionId',
        'creation_time': 'creationTime',
        'matched_participant_count': 'matchedParticipantCount',
        'review_size': 'reviewSize',
        'reviewed_count': 'reviewedCount',
        'review_status': 'reviewStatus',
        'participant_cohort_statuses': 'participantCohortStatuses',
        'page': 'page',
        'page_size': 'pageSize',
        'sort_order': 'sortOrder',
        'sort_column': 'sortColumn'
    }

    def __init__(self, cohort_review_id=None, cohort_id=None, cdr_version_id=None, creation_time=None, matched_participant_count=None, review_size=None, reviewed_count=None, review_status=None, participant_cohort_statuses=None, page=None, page_size=None, sort_order=None, sort_column=None):
        """
        CohortReview - a model defined in Swagger
        """

        self._cohort_review_id = None
        self._cohort_id = None
        self._cdr_version_id = None
        self._creation_time = None
        self._matched_participant_count = None
        self._review_size = None
        self._reviewed_count = None
        self._review_status = None
        self._participant_cohort_statuses = None
        self._page = None
        self._page_size = None
        self._sort_order = None
        self._sort_column = None
        self.discriminator = None

        self.cohort_review_id = cohort_review_id
        self.cohort_id = cohort_id
        self.cdr_version_id = cdr_version_id
        self.creation_time = creation_time
        self.matched_participant_count = matched_participant_count
        if review_size is not None:
          self.review_size = review_size
        if reviewed_count is not None:
          self.reviewed_count = reviewed_count
        self.review_status = review_status
        if participant_cohort_statuses is not None:
          self.participant_cohort_statuses = participant_cohort_statuses
        if page is not None:
          self.page = page
        if page_size is not None:
          self.page_size = page_size
        if sort_order is not None:
          self.sort_order = sort_order
        if sort_column is not None:
          self.sort_column = sort_column

    @property
    def cohort_review_id(self):
        """
        Gets the cohort_review_id of this CohortReview.

        :return: The cohort_review_id of this CohortReview.
        :rtype: int
        """
        return self._cohort_review_id

    @cohort_review_id.setter
    def cohort_review_id(self, cohort_review_id):
        """
        Sets the cohort_review_id of this CohortReview.

        :param cohort_review_id: The cohort_review_id of this CohortReview.
        :type: int
        """
        if cohort_review_id is None:
            raise ValueError("Invalid value for `cohort_review_id`, must not be `None`")

        self._cohort_review_id = cohort_review_id

    @property
    def cohort_id(self):
        """
        Gets the cohort_id of this CohortReview.

        :return: The cohort_id of this CohortReview.
        :rtype: int
        """
        return self._cohort_id

    @cohort_id.setter
    def cohort_id(self, cohort_id):
        """
        Sets the cohort_id of this CohortReview.

        :param cohort_id: The cohort_id of this CohortReview.
        :type: int
        """
        if cohort_id is None:
            raise ValueError("Invalid value for `cohort_id`, must not be `None`")

        self._cohort_id = cohort_id

    @property
    def cdr_version_id(self):
        """
        Gets the cdr_version_id of this CohortReview.

        :return: The cdr_version_id of this CohortReview.
        :rtype: int
        """
        return self._cdr_version_id

    @cdr_version_id.setter
    def cdr_version_id(self, cdr_version_id):
        """
        Sets the cdr_version_id of this CohortReview.

        :param cdr_version_id: The cdr_version_id of this CohortReview.
        :type: int
        """
        if cdr_version_id is None:
            raise ValueError("Invalid value for `cdr_version_id`, must not be `None`")

        self._cdr_version_id = cdr_version_id

    @property
    def creation_time(self):
        """
        Gets the creation_time of this CohortReview.

        :return: The creation_time of this CohortReview.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this CohortReview.

        :param creation_time: The creation_time of this CohortReview.
        :type: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def matched_participant_count(self):
        """
        Gets the matched_participant_count of this CohortReview.

        :return: The matched_participant_count of this CohortReview.
        :rtype: int
        """
        return self._matched_participant_count

    @matched_participant_count.setter
    def matched_participant_count(self, matched_participant_count):
        """
        Sets the matched_participant_count of this CohortReview.

        :param matched_participant_count: The matched_participant_count of this CohortReview.
        :type: int
        """
        if matched_participant_count is None:
            raise ValueError("Invalid value for `matched_participant_count`, must not be `None`")

        self._matched_participant_count = matched_participant_count

    @property
    def review_size(self):
        """
        Gets the review_size of this CohortReview.

        :return: The review_size of this CohortReview.
        :rtype: int
        """
        return self._review_size

    @review_size.setter
    def review_size(self, review_size):
        """
        Sets the review_size of this CohortReview.

        :param review_size: The review_size of this CohortReview.
        :type: int
        """

        self._review_size = review_size

    @property
    def reviewed_count(self):
        """
        Gets the reviewed_count of this CohortReview.

        :return: The reviewed_count of this CohortReview.
        :rtype: int
        """
        return self._reviewed_count

    @reviewed_count.setter
    def reviewed_count(self, reviewed_count):
        """
        Sets the reviewed_count of this CohortReview.

        :param reviewed_count: The reviewed_count of this CohortReview.
        :type: int
        """

        self._reviewed_count = reviewed_count

    @property
    def review_status(self):
        """
        Gets the review_status of this CohortReview.

        :return: The review_status of this CohortReview.
        :rtype: ReviewStatus
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status):
        """
        Sets the review_status of this CohortReview.

        :param review_status: The review_status of this CohortReview.
        :type: ReviewStatus
        """
        if review_status is None:
            raise ValueError("Invalid value for `review_status`, must not be `None`")

        self._review_status = review_status

    @property
    def participant_cohort_statuses(self):
        """
        Gets the participant_cohort_statuses of this CohortReview.

        :return: The participant_cohort_statuses of this CohortReview.
        :rtype: list[ParticipantCohortStatus]
        """
        return self._participant_cohort_statuses

    @participant_cohort_statuses.setter
    def participant_cohort_statuses(self, participant_cohort_statuses):
        """
        Sets the participant_cohort_statuses of this CohortReview.

        :param participant_cohort_statuses: The participant_cohort_statuses of this CohortReview.
        :type: list[ParticipantCohortStatus]
        """

        self._participant_cohort_statuses = participant_cohort_statuses

    @property
    def page(self):
        """
        Gets the page of this CohortReview.

        :return: The page of this CohortReview.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this CohortReview.

        :param page: The page of this CohortReview.
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this CohortReview.

        :return: The page_size of this CohortReview.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this CohortReview.

        :param page_size: The page_size of this CohortReview.
        :type: int
        """

        self._page_size = page_size

    @property
    def sort_order(self):
        """
        Gets the sort_order of this CohortReview.

        :return: The sort_order of this CohortReview.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this CohortReview.

        :param sort_order: The sort_order of this CohortReview.
        :type: str
        """

        self._sort_order = sort_order

    @property
    def sort_column(self):
        """
        Gets the sort_column of this CohortReview.

        :return: The sort_column of this CohortReview.
        :rtype: str
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """
        Sets the sort_column of this CohortReview.

        :param sort_column: The sort_column of this CohortReview.
        :type: str
        """

        self._sort_column = sort_column

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CohortReview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
