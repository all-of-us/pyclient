# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BillingProjectMembership(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'role': 'str',
        'status': 'BillingProjectStatus'
    }

    attribute_map = {
        'project_name': 'projectName',
        'role': 'role',
        'status': 'status'
    }

    def __init__(self, project_name=None, role=None, status=None):
        """
        BillingProjectMembership - a model defined in Swagger
        """

        self._project_name = None
        self._role = None
        self._status = None
        self.discriminator = None

        self.project_name = project_name
        self.role = role
        self.status = status

    @property
    def project_name(self):
        """
        Gets the project_name of this BillingProjectMembership.
        the name of the project

        :return: The project_name of this BillingProjectMembership.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this BillingProjectMembership.
        the name of the project

        :param project_name: The project_name of this BillingProjectMembership.
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")

        self._project_name = project_name

    @property
    def role(self):
        """
        Gets the role of this BillingProjectMembership.
        the role of the current user in the project

        :return: The role of this BillingProjectMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this BillingProjectMembership.
        the role of the current user in the project

        :param role: The role of this BillingProjectMembership.
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def status(self):
        """
        Gets the status of this BillingProjectMembership.

        :return: The status of this BillingProjectMembership.
        :rtype: BillingProjectStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BillingProjectMembership.

        :param status: The status of this BillingProjectMembership.
        :type: BillingProjectStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BillingProjectMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
