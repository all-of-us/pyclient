# coding: utf-8

"""
    AllOfUs Client API

    The API used by AllOfUs workbench clients (including both notebooks and our UI.)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CohortAnnotationsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cohort_name': 'str',
        'status_filter': 'list[CohortStatus]',
        'cdr_version_name': 'str',
        'annotation_query': 'AnnotationQuery'
    }

    attribute_map = {
        'cohort_name': 'cohortName',
        'status_filter': 'statusFilter',
        'cdr_version_name': 'cdrVersionName',
        'annotation_query': 'annotationQuery'
    }

    def __init__(self, cohort_name=None, status_filter=None, cdr_version_name=None, annotation_query=None):
        """
        CohortAnnotationsRequest - a model defined in Swagger
        """

        self._cohort_name = None
        self._status_filter = None
        self._cdr_version_name = None
        self._annotation_query = None
        self.discriminator = None

        self.cohort_name = cohort_name
        if status_filter is not None:
          self.status_filter = status_filter
        if cdr_version_name is not None:
          self.cdr_version_name = cdr_version_name
        if annotation_query is not None:
          self.annotation_query = annotation_query

    @property
    def cohort_name(self):
        """
        Gets the cohort_name of this CohortAnnotationsRequest.
        The name of a cohort that annotations should be retrieved for. 

        :return: The cohort_name of this CohortAnnotationsRequest.
        :rtype: str
        """
        return self._cohort_name

    @cohort_name.setter
    def cohort_name(self, cohort_name):
        """
        Sets the cohort_name of this CohortAnnotationsRequest.
        The name of a cohort that annotations should be retrieved for. 

        :param cohort_name: The cohort_name of this CohortAnnotationsRequest.
        :type: str
        """
        if cohort_name is None:
            raise ValueError("Invalid value for `cohort_name`, must not be `None`")

        self._cohort_name = cohort_name

    @property
    def status_filter(self):
        """
        Gets the status_filter of this CohortAnnotationsRequest.
        An array of status values; participants with these statuses will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. 

        :return: The status_filter of this CohortAnnotationsRequest.
        :rtype: list[CohortStatus]
        """
        return self._status_filter

    @status_filter.setter
    def status_filter(self, status_filter):
        """
        Sets the status_filter of this CohortAnnotationsRequest.
        An array of status values; participants with these statuses will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. 

        :param status_filter: The status_filter of this CohortAnnotationsRequest.
        :type: list[CohortStatus]
        """

        self._status_filter = status_filter

    @property
    def cdr_version_name(self):
        """
        Gets the cdr_version_name of this CohortAnnotationsRequest.
        The name of a CDR version to use when retrieving annotations; if none is specified, the CDR version currently associated with the workspace will be used 

        :return: The cdr_version_name of this CohortAnnotationsRequest.
        :rtype: str
        """
        return self._cdr_version_name

    @cdr_version_name.setter
    def cdr_version_name(self, cdr_version_name):
        """
        Sets the cdr_version_name of this CohortAnnotationsRequest.
        The name of a CDR version to use when retrieving annotations; if none is specified, the CDR version currently associated with the workspace will be used 

        :param cdr_version_name: The cdr_version_name of this CohortAnnotationsRequest.
        :type: str
        """

        self._cdr_version_name = cdr_version_name

    @property
    def annotation_query(self):
        """
        Gets the annotation_query of this CohortAnnotationsRequest.
        Specification defining what annotations to retrieve. 

        :return: The annotation_query of this CohortAnnotationsRequest.
        :rtype: AnnotationQuery
        """
        return self._annotation_query

    @annotation_query.setter
    def annotation_query(self, annotation_query):
        """
        Sets the annotation_query of this CohortAnnotationsRequest.
        Specification defining what annotations to retrieve. 

        :param annotation_query: The annotation_query of this CohortAnnotationsRequest.
        :type: AnnotationQuery
        """

        self._annotation_query = annotation_query

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CohortAnnotationsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
