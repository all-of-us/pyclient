# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParticipantCohortStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant_id': 'int',
        'status': 'CohortStatus',
        'gender_concept_id': 'int',
        'gender': 'str',
        'birth_date': 'int',
        'race_concept_id': 'int',
        'race': 'str',
        'ethnicity_concept_id': 'int',
        'ethnicity': 'str'
    }

    attribute_map = {
        'participant_id': 'participantId',
        'status': 'status',
        'gender_concept_id': 'genderConceptId',
        'gender': 'gender',
        'birth_date': 'birthDate',
        'race_concept_id': 'raceConceptId',
        'race': 'race',
        'ethnicity_concept_id': 'ethnicityConceptId',
        'ethnicity': 'ethnicity'
    }

    def __init__(self, participant_id=None, status=None, gender_concept_id=None, gender=None, birth_date=None, race_concept_id=None, race=None, ethnicity_concept_id=None, ethnicity=None):
        """
        ParticipantCohortStatus - a model defined in Swagger
        """

        self._participant_id = None
        self._status = None
        self._gender_concept_id = None
        self._gender = None
        self._birth_date = None
        self._race_concept_id = None
        self._race = None
        self._ethnicity_concept_id = None
        self._ethnicity = None
        self.discriminator = None

        self.participant_id = participant_id
        self.status = status
        if gender_concept_id is not None:
          self.gender_concept_id = gender_concept_id
        if gender is not None:
          self.gender = gender
        if birth_date is not None:
          self.birth_date = birth_date
        if race_concept_id is not None:
          self.race_concept_id = race_concept_id
        if race is not None:
          self.race = race
        if ethnicity_concept_id is not None:
          self.ethnicity_concept_id = ethnicity_concept_id
        if ethnicity is not None:
          self.ethnicity = ethnicity

    @property
    def participant_id(self):
        """
        Gets the participant_id of this ParticipantCohortStatus.

        :return: The participant_id of this ParticipantCohortStatus.
        :rtype: int
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """
        Sets the participant_id of this ParticipantCohortStatus.

        :param participant_id: The participant_id of this ParticipantCohortStatus.
        :type: int
        """
        if participant_id is None:
            raise ValueError("Invalid value for `participant_id`, must not be `None`")

        self._participant_id = participant_id

    @property
    def status(self):
        """
        Gets the status of this ParticipantCohortStatus.

        :return: The status of this ParticipantCohortStatus.
        :rtype: CohortStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ParticipantCohortStatus.

        :param status: The status of this ParticipantCohortStatus.
        :type: CohortStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def gender_concept_id(self):
        """
        Gets the gender_concept_id of this ParticipantCohortStatus.

        :return: The gender_concept_id of this ParticipantCohortStatus.
        :rtype: int
        """
        return self._gender_concept_id

    @gender_concept_id.setter
    def gender_concept_id(self, gender_concept_id):
        """
        Sets the gender_concept_id of this ParticipantCohortStatus.

        :param gender_concept_id: The gender_concept_id of this ParticipantCohortStatus.
        :type: int
        """

        self._gender_concept_id = gender_concept_id

    @property
    def gender(self):
        """
        Gets the gender of this ParticipantCohortStatus.

        :return: The gender of this ParticipantCohortStatus.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this ParticipantCohortStatus.

        :param gender: The gender of this ParticipantCohortStatus.
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """
        Gets the birth_date of this ParticipantCohortStatus.

        :return: The birth_date of this ParticipantCohortStatus.
        :rtype: int
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this ParticipantCohortStatus.

        :param birth_date: The birth_date of this ParticipantCohortStatus.
        :type: int
        """

        self._birth_date = birth_date

    @property
    def race_concept_id(self):
        """
        Gets the race_concept_id of this ParticipantCohortStatus.

        :return: The race_concept_id of this ParticipantCohortStatus.
        :rtype: int
        """
        return self._race_concept_id

    @race_concept_id.setter
    def race_concept_id(self, race_concept_id):
        """
        Sets the race_concept_id of this ParticipantCohortStatus.

        :param race_concept_id: The race_concept_id of this ParticipantCohortStatus.
        :type: int
        """

        self._race_concept_id = race_concept_id

    @property
    def race(self):
        """
        Gets the race of this ParticipantCohortStatus.

        :return: The race of this ParticipantCohortStatus.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """
        Sets the race of this ParticipantCohortStatus.

        :param race: The race of this ParticipantCohortStatus.
        :type: str
        """

        self._race = race

    @property
    def ethnicity_concept_id(self):
        """
        Gets the ethnicity_concept_id of this ParticipantCohortStatus.

        :return: The ethnicity_concept_id of this ParticipantCohortStatus.
        :rtype: int
        """
        return self._ethnicity_concept_id

    @ethnicity_concept_id.setter
    def ethnicity_concept_id(self, ethnicity_concept_id):
        """
        Sets the ethnicity_concept_id of this ParticipantCohortStatus.

        :param ethnicity_concept_id: The ethnicity_concept_id of this ParticipantCohortStatus.
        :type: int
        """

        self._ethnicity_concept_id = ethnicity_concept_id

    @property
    def ethnicity(self):
        """
        Gets the ethnicity of this ParticipantCohortStatus.

        :return: The ethnicity of this ParticipantCohortStatus.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """
        Sets the ethnicity of this ParticipantCohortStatus.

        :param ethnicity: The ethnicity of this ParticipantCohortStatus.
        :type: str
        """

        self._ethnicity = ethnicity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParticipantCohortStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
