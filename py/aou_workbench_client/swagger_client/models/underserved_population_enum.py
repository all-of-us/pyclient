# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UnderservedPopulationEnum(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    RACE_AMERICAN_INDIAN_OR_ALASKA_NATIVE = "RACE_AMERICAN_INDIAN_OR_ALASKA_NATIVE"
    RACE_ASIAN = "RACE_ASIAN"
    RACE_BLACK_AFRICAN_OR_AFRICAN_AMERICAN = "RACE_BLACK_AFRICAN_OR_AFRICAN_AMERICAN"
    RACE_HISPANIC_OR_LATINO = "RACE_HISPANIC_OR_LATINO"
    RACE_MIDDLE_EASTERN_OR_NORTH_AFRICAN = "RACE_MIDDLE_EASTERN_OR_NORTH_AFRICAN"
    RACE_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER = "RACE_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER"
    RACE_MORE_THAN_ONE_RACE = "RACE_MORE_THAN_ONE_RACE"
    AGE_CHILDREN = "AGE_CHILDREN"
    AGE_ADOLESCENTS = "AGE_ADOLESCENTS"
    AGE_OLDER_ADULTS = "AGE_OLDER_ADULTS"
    AGE_ELDERLY = "AGE_ELDERLY"
    SEX_FEMALE = "SEX_FEMALE"
    SEX_INTERSEX = "SEX_INTERSEX"
    SEXUAL_ORIENTATION_GAY = "SEXUAL_ORIENTATION_GAY"
    SEXUAL_ORIENTATION_LESBIAN = "SEXUAL_ORIENTATION_LESBIAN"
    SEXUAL_ORIENTATION_BISEXUAL = "SEXUAL_ORIENTATION_BISEXUAL"
    SEXUAL_ORIENTATION_POLYSEXUAL_OMNISEXUAL_SAPIOSEXUAL_OR_PANSEXUAL = "SEXUAL_ORIENTATION_POLYSEXUAL_OMNISEXUAL_SAPIOSEXUAL_OR_PANSEXUAL"
    SEXUAL_ORIENTATION_ASEXUAL = "SEXUAL_ORIENTATION_ASEXUAL"
    SEXUAL_ORIENTATION_TWO_SPIRIT = "SEXUAL_ORIENTATION_TWO_SPIRIT"
    SEXUAL_ORIENTATION_FIGURING_OUT_SEXUALITY = "SEXUAL_ORIENTATION_FIGURING_OUT_SEXUALITY"
    SEXUAL_ORIENTATION_MOSTLY_STRAIGHT = "SEXUAL_ORIENTATION_MOSTLY_STRAIGHT"
    SEXUAL_ORIENTATION_DOES_NOT_THINK_OF_HAVING_SEXUALITY = "SEXUAL_ORIENTATION_DOES_NOT_THINK_OF_HAVING_SEXUALITY"
    SEXUAL_ORIENTATION_DOES_NOT_USE_LABELS = "SEXUAL_ORIENTATION_DOES_NOT_USE_LABELS"
    SEXUAL_ORIENTATION_DOES_NOT_KNOW_ANSWER = "SEXUAL_ORIENTATION_DOES_NOT_KNOW_ANSWER"
    GENDER_IDENTITY_WOMAN = "GENDER_IDENTITY_WOMAN"
    GENDER_IDENTITY_NON_BINARY = "GENDER_IDENTITY_NON_BINARY"
    GENDER_IDENTITY_TRANSMAN = "GENDER_IDENTITY_TRANSMAN"
    GENDER_IDENTITY_TRANSWOMAN = "GENDER_IDENTITY_TRANSWOMAN"
    GENDER_IDENTITY_GENDERQUEER = "GENDER_IDENTITY_GENDERQUEER"
    GENDER_IDENTITY_GENDERFLUID = "GENDER_IDENTITY_GENDERFLUID"
    GENDER_IDENTITY_GENDER_VARIANT = "GENDER_IDENTITY_GENDER_VARIANT"
    GENDER_IDENTITY_QUESTIONING = "GENDER_IDENTITY_QUESTIONING"
    GEOGRAPHY_URBAN_CLUSTERS = "GEOGRAPHY_URBAN_CLUSTERS"
    GEOGRAPHY_RURAL = "GEOGRAPHY_RURAL"
    DISABILITY_PHYSICAL = "DISABILITY_PHYSICAL"
    DISABILITY_MENTAL = "DISABILITY_MENTAL"
    ACCESS_TO_CARE_NOT_PAST_TWELVE_MONTHS = "ACCESS_TO_CARE_NOT_PAST_TWELVE_MONTHS"
    ACCESS_TO_CARE_CANNOT_OBTAIN_OR_PAY_FOR = "ACCESS_TO_CARE_CANNOT_OBTAIN_OR_PAY_FOR"
    EDUCATION_INCOME_LESS_THAN_HIGH_SCHOOL_GRADUATE = "EDUCATION_INCOME_LESS_THAN_HIGH_SCHOOL_GRADUATE"
    EDUCATION_INCOME_LESS_THAN_TWENTY_FIVE_THOUSAND_FOR_FOUR_PEOPLE = "EDUCATION_INCOME_LESS_THAN_TWENTY_FIVE_THOUSAND_FOR_FOUR_PEOPLE"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        
    }

    attribute_map = {
        
    }

    def __init__(self):
        """
        UnderservedPopulationEnum - a model defined in Swagger
        """

        self.discriminator = None


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UnderservedPopulationEnum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
