# coding: utf-8

"""
    AllOfUs Workbench API

    The API for the AllOfUs workbench.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ModifyParticipantCohortAnnotationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value_string': 'str',
        'value_enum': 'str',
        'value_date': 'str',
        'value_boolean': 'bool',
        'value_integer': 'int'
    }

    attribute_map = {
        'value_string': 'valueString',
        'value_enum': 'valueEnum',
        'value_date': 'valueDate',
        'value_boolean': 'valueBoolean',
        'value_integer': 'valueInteger'
    }

    def __init__(self, value_string=None, value_enum=None, value_date=None, value_boolean=None, value_integer=None):
        """
        ModifyParticipantCohortAnnotationRequest - a model defined in Swagger
        """

        self._value_string = None
        self._value_enum = None
        self._value_date = None
        self._value_boolean = None
        self._value_integer = None
        self.discriminator = None

        if value_string is not None:
          self.value_string = value_string
        if value_enum is not None:
          self.value_enum = value_enum
        if value_date is not None:
          self.value_date = value_date
        if value_boolean is not None:
          self.value_boolean = value_boolean
        if value_integer is not None:
          self.value_integer = value_integer

    @property
    def value_string(self):
        """
        Gets the value_string of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is STRING

        :return: The value_string of this ModifyParticipantCohortAnnotationRequest.
        :rtype: str
        """
        return self._value_string

    @value_string.setter
    def value_string(self, value_string):
        """
        Sets the value_string of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is STRING

        :param value_string: The value_string of this ModifyParticipantCohortAnnotationRequest.
        :type: str
        """

        self._value_string = value_string

    @property
    def value_enum(self):
        """
        Gets the value_enum of this ModifyParticipantCohortAnnotationRequest.
        The option chosen for the annotation if the AnnotationType is ENUM

        :return: The value_enum of this ModifyParticipantCohortAnnotationRequest.
        :rtype: str
        """
        return self._value_enum

    @value_enum.setter
    def value_enum(self, value_enum):
        """
        Sets the value_enum of this ModifyParticipantCohortAnnotationRequest.
        The option chosen for the annotation if the AnnotationType is ENUM

        :param value_enum: The value_enum of this ModifyParticipantCohortAnnotationRequest.
        :type: str
        """

        self._value_enum = value_enum

    @property
    def value_date(self):
        """
        Gets the value_date of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is DATE

        :return: The value_date of this ModifyParticipantCohortAnnotationRequest.
        :rtype: str
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """
        Sets the value_date of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is DATE

        :param value_date: The value_date of this ModifyParticipantCohortAnnotationRequest.
        :type: str
        """

        self._value_date = value_date

    @property
    def value_boolean(self):
        """
        Gets the value_boolean of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is BOOLEAN

        :return: The value_boolean of this ModifyParticipantCohortAnnotationRequest.
        :rtype: bool
        """
        return self._value_boolean

    @value_boolean.setter
    def value_boolean(self, value_boolean):
        """
        Sets the value_boolean of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is BOOLEAN

        :param value_boolean: The value_boolean of this ModifyParticipantCohortAnnotationRequest.
        :type: bool
        """

        self._value_boolean = value_boolean

    @property
    def value_integer(self):
        """
        Gets the value_integer of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is INTEGER

        :return: The value_integer of this ModifyParticipantCohortAnnotationRequest.
        :rtype: int
        """
        return self._value_integer

    @value_integer.setter
    def value_integer(self, value_integer):
        """
        Sets the value_integer of this ModifyParticipantCohortAnnotationRequest.
        The Value of the annotation if the AnnotationType is INTEGER

        :param value_integer: The value_integer of this ModifyParticipantCohortAnnotationRequest.
        :type: int
        """

        self._value_integer = value_integer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModifyParticipantCohortAnnotationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
